// Generated by IcedCoffeeScript 108.0.11
(function() {
  var window;

  window = global;

  window.once_interval = function(timer, cb, interval) {
    if (interval == null) {
      interval = 100;
    }
    if (!timer) {
      return setTimeout(cb, interval);
    }
    return timer;
  };

  String.prototype.to_s = String.prototype.toString;

  Array.prototype.to_s = Array.prototype.toString;

  Number.prototype.to_s = Number.prototype.toString;

  global.ppw = function(t) {
    return console.log(JSON.stringify(t, null, 4));
  };

  window.count = function(t) {
    var k, ret;
    if (t instanceof Array) {
      return t.length;
    }
    ret = 0;
    for (k in t) {
      ret++;
    }
    return ret;
  };

  Array.prototype.hash_key = function(key) {
    var hash, v, _i, _len;
    hash = {};
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      v = this[_i];
      hash[v[key]] = this;
    }
    this.hash = hash;
  };

  window.stream_parallel = function(on_end) {
    var ret, yield_constructor;
    yield_constructor = null;
    ret = function() {
      yield_constructor.left--;
      if (yield_constructor.left === 0) {
        on_end();
      }
    };
    process.nextTick(ret);
    yield_constructor = function(incr) {
      if (incr == null) {
        incr = 1;
      }
      yield_constructor.left += incr;
      return ret;
    };
    yield_constructor.left = 1;
    yield_constructor.end = function() {
      if (yield_constructor.left !== 0) {
        yield_constructor.left = 0;
        on_end();
      }
    };
    return yield_constructor;
  };

}).call(this);
