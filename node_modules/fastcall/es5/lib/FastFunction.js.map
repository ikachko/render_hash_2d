{"version":3,"sources":["../../lib/FastFunction.js"],"names":["_","require","assert","Promise","native","dyncall","dynload","defs","callMode","FunctionDefinition","util","verify","a","ert","ref","refHelpers","FastFunction","library","def","ptr","isObject","sync","async","_ptr","_vm","_function","_other","_type","function","findSymbol","_pLib","name","path","newCallVM","options","vmSize","_makeFunction","free","getFunction","initialize","_makeAsyncFunction","_makeSyncFunction","vmArgSetters","args","map","_findVMSetterFunc","arg","type","funcArgs","range","length","n","funcBody","i","synchronized","queued","Ctx","fn","vm","setVM","setVMAndReset","setter","specPtrDef","callback","struct","union","array","func","makePtr","value","isArrayType","_makeArrayPtr","isFunctionType","_makeCallbackPtr","isStringType","_makeStringPtr","callerFunc","_makeCallerFunc","innerFunc","innerFuncArgs","concat","Function","err","Error","ctx","apply","arguments","_initFunction","hasPtrArg","Boolean","filter","isPointerType","head","finallyCode","f","ptrs","push","promisify","self","Object","defineProperties","get","findFastcallFunc","isPtr","resultType","indirection","toFastcallName","isFunction","resultDerefType","derefType","result","_makePtr","Buffer","isString","makeStringBuffer","buffer","module","exports"],"mappings":"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","file":"FastFunction.js","sourcesContent":["/*\nCopyright 2016 Gábor Mező (gabor.mezo@outlook.com)\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\nconst _ = require('lodash');\nconst assert = require('assert');\nconst Promise = require('bluebird');\nconst native = require('./native');\nconst dyncall = native.dyncall;\nconst dynload = native.dynload;\nconst defs = require('./defs');\nconst callMode = defs.callMode;\nconst FunctionDefinition = require('./FunctionDefinition');\nconst util = require('util');\nconst verify = require('./verify');\nconst a = verify.a;\nconst ert = verify.ert;\nconst ref = require('./ref-libs/ref');\nconst refHelpers = require('./refHelpers');\n\nclass FastFunction extends FunctionDefinition {\n    constructor(library, def, callMode, ptr) {\n        assert(_.isObject(library), '\"library\" is not an object.');\n        assert(callMode === defs.callMode.sync || callMode === defs.callMode.async, '\"callMode\" is invalid: ' + callMode);\n        super(library, def);\n        this.callMode = callMode;\n        this._ptr = ptr;\n        this._vm = null;\n        this._function = null;\n        this._other = null;\n        this._type.function = this;\n    }\n\n    initialize() {\n        if (!this._ptr) {\n            this._ptr = dynload.findSymbol(this.library._pLib, this.name);\n        }\n        assert(this._ptr, `Symbol \"${ this.name }\" not found in library \"${ this.library.path }\".`);\n        this._vm = dyncall.newCallVM(this.library.options.vmSize);\n        this._function = this._makeFunction();\n    }\n\n    release() {\n        dyncall.free(this._vm);\n    }\n\n    getFunction() {\n        assert(this._function, this.name + ' is not initialized.');\n        return this._function;\n    }\n\n    sync() {\n        if (this.callMode === defs.callMode.sync) {\n            return this.getFunction();\n        }\n        if (!this._other) {\n            this._other = new FastFunction(this.library, this, defs.callMode.sync, this._ptr);\n            this._other.initialize();\n        }\n        return this._other.getFunction();\n    }\n\n    async() {\n        if (this.callMode === defs.callMode.async) {\n            return this.getFunction();\n        }\n        if (!this._other) {\n            this._other = new FastFunction(this.library, this, defs.callMode.async, this._ptr);\n            this._other.initialize();\n        }\n        return this._other.getFunction();\n    }\n\n    _makeFunction() {\n        if (this.callMode === defs.callMode.async) {\n            return this._makeAsyncFunction();\n        }\n        return this._makeSyncFunction();\n    }\n\n    _makeSyncFunction() {\n        const vmArgSetters = this.args.map(arg => this._findVMSetterFunc(arg.type));\n        const funcArgs = _.range(vmArgSetters.length).map(n => 'arg' + n);\n        let funcBody = 'this.setVM(this.vm);';\n        for (let i = 0; i < vmArgSetters.length; i++) {\n            funcBody += `this.argSetter${ i }(arg${ i });`;\n        }\n        if (this.library.synchronized) {\n            funcBody += 'this.library._lock();';\n            funcBody += 'try {';\n            funcBody += 'return this.callerFunc();';\n            funcBody += '}';\n            funcBody += 'finally {';\n            funcBody += 'this.library._unlock();';\n            funcBody += '}';\n        }\n        else {\n            if (this.library.queued) {\n                funcBody += 'this.library._assertQueueEmpty();';\n            }\n            funcBody += 'return this.callerFunc();';\n        }\n\n        class Ctx {\n            constructor(fn) {\n                this.library = fn.library;\n                this.vm = fn._vm;\n                this.setVM = dyncall.setVMAndReset;\n                let i = 0;\n                for (const setter of vmArgSetters) {\n                    const specPtrDef = setter.type.callback ||\n                            setter.type.struct ||\n                            setter.type.union ||\n                            setter.type.array;\n                    if (specPtrDef) {\n                        this['argSetter' + i++] = value => {\n                            setter.func(specPtrDef.makePtr(value));\n                        };\n                    }\n                    else if (refHelpers.isArrayType(setter.type)) {\n                        this['argSetter' + i++] = value => {\n                            setter.func(FastFunction._makeArrayPtr(value));\n                        };\n                    }\n                    else if (refHelpers.isFunctionType(setter.type)) {\n                        this['argSetter' + i++] = value => {\n                            setter.func(fn._makeCallbackPtr(value));\n                        };\n                    }\n                    else if (refHelpers.isStringType(setter.type)) {\n                        this['argSetter' + i++] = value => {\n                            setter.func(fn._makeStringPtr(value));\n                        };\n                    }\n                    else {\n                        this['argSetter' + i++] = setter.func;\n                    }\n                }\n                this.callerFunc = fn._makeCallerFunc();\n            }\n        }\n\n        let innerFunc;\n        try {\n            const innerFuncArgs = funcArgs.concat([funcBody]);\n            innerFunc = new Function(...innerFuncArgs);\n        }\n        catch (err) {\n            throw Error('Invalid function body: ' + funcBody);\n        }\n        const ctx = new Ctx(this);\n        const func = function () {\n            return innerFunc.apply(ctx, arguments);\n        };\n        return this._initFunction(func);\n    }\n\n    _makeAsyncFunction() {\n        const vmArgSetters = this.args.map(arg => this._findVMSetterFunc(arg.type));\n        const hasPtrArg = Boolean(_(vmArgSetters).filter(setter => refHelpers.isPointerType(setter.type)).head());\n        const funcArgs = _.range(vmArgSetters.length).map(n => 'arg' + n);\n        let funcBody = hasPtrArg ? 'var ptrs = [];' : '';\n        funcBody += 'var myVM = this.vm;';\n        funcBody += 'this.setVM(myVM);';\n        for (let i = 0; i < vmArgSetters.length; i++) {\n            const setter = vmArgSetters[i];\n            if (refHelpers.isPointerType(setter.type)) {\n                funcBody += `this.argSetter${ i }(arg${ i }, ptrs);`;\n            }\n            else {\n                funcBody += `this.argSetter${ i }(arg${ i });`;\n            }\n        }\n\n        let finallyCode = '{';\n        if (this.library.synchronized) {\n            finallyCode += 'this.library._unlock();';\n            funcBody += 'this.library._lock();';\n        }\n        if (hasPtrArg) {\n            finallyCode += 'ptrs = null;';\n        }\n        finallyCode += '}';\n\n        const f = `return this.callerFunc(myVM).finally(() => ${ finallyCode });`;\n        if (this.library.queued) {\n            funcBody += `return this.library._enqueue(() => { ${ f } });`;\n        }\n        else {\n            funcBody += f;\n        }\n\n        class Ctx {\n            constructor(fn) {\n                this.library = fn.library;\n                this.setVM = dyncall.setVM;\n                this.free = dyncall.free;\n                let i = 0;\n                for (const setter of vmArgSetters) {\n                    if (refHelpers.isPointerType(setter.type)) {\n                        const specPtrDef = setter.type.callback ||\n                                setter.type.struct ||\n                                setter.type.union ||\n                                setter.type.array;\n                        if (specPtrDef) {\n                            this['argSetter' + i++] = (value, ptrs) => {\n                                const ptr = specPtrDef.makePtr(value);\n                                ptrs.push(ptr);\n                                setter.func(ptr);\n                            };\n                        }\n                        else if (refHelpers.isArrayType(setter.type)) {\n                            this['argSetter' + i++] = (value, ptrs) => {\n                                const ptr = FastFunction._makeArrayPtr(value);\n                                ptrs.push(ptr);\n                                setter.func(ptr);\n                            };\n                        }\n                        else if (refHelpers.isFunctionType(setter.type)) {\n                            this['argSetter' + i++] = (value, ptrs) => {\n                                const ptr = fn._makeCallbackPtr(value);\n                                ptrs.push(ptr);\n                                setter.func(ptr);\n                            };\n                        }\n                        else if (refHelpers.isStringType(setter.type)) {\n                            this['argSetter' + i++] = (value, ptrs) => {\n                                const ptr = fn._makeStringPtr(value);\n                                ptrs.push(ptr);\n                                setter.func(ptr);\n                            };\n                        }\n                        else {\n                            this['argSetter' + i++] = (value, ptrs) => {\n                                ptrs.push(value);\n                                setter.func(value);\n                            };\n                        }\n                    }\n                    else {\n                        this['argSetter' + i++] = setter.func;\n                    }\n                }\n                this.callerFunc = Promise.promisify(fn._makeCallerFunc());\n                this.vm = null;\n            }\n        }\n\n        const ctx = new Ctx(this);\n        const vmSize = this.library.options.vmSize;\n\n        let innerFunc;\n        try {\n            innerFunc = new Function(...funcArgs.concat([funcBody]));\n        }\n        catch (err) {\n            throw Error('Invalid function body: ' + funcBody);\n        }\n\n        const func = function () {\n            ctx.vm = dyncall.newCallVM(vmSize);\n            return innerFunc.apply(ctx, arguments);\n        };\n        return this._initFunction(func);\n    }\n\n    _initFunction(func) {\n        func.function = this;\n        func.type = this.type;\n        const self = this;\n        Object.defineProperties(func, {\n            sync: {\n                get: function () {\n                    return self.sync();\n                }\n            },\n            async: {\n                get: function () {\n                    return self.async();\n                }\n            }\n        });\n        return func;\n    }\n\n    _findVMSetterFunc(type) {\n        return this.findFastcallFunc(dyncall, 'arg', type);\n    }\n\n    _makeCallerFunc() {\n        let name;\n        let isPtr = false;\n        let async = false;\n        if (this.resultType.indirection > 1) {\n            name = 'callPointer';\n            isPtr = true;\n        }\n        else {\n            name = 'call' + this.toFastcallName(this.resultType.name);\n        }\n        if (this.callMode === defs.callMode.async) {\n            name += 'Async';\n            async = true;\n        }\n\n        const func = dyncall[name];\n        a&&ert(_.isFunction(func));\n\n        if (async) {\n            if (isPtr) {\n                const resultDerefType = ref.derefType(this.resultType);\n                return (vm, callback) => {\n                    func(vm, this._ptr, (err, result) => {\n                        if (err) {\n                            return callback(err);\n                        }\n                        result.type = resultDerefType;\n                        callback(null, result);\n                    });\n                };\n            }\n\n            return (vm, callback) => func(vm, this._ptr, callback);\n        }\n\n        if (isPtr) {\n            const resultDerefType = ref.derefType(this.resultType);\n            return () => {\n                const result = func(this._ptr);\n                result.type = resultDerefType;\n                return result;\n            };\n        }\n\n        return () => func(this._ptr);\n    }\n\n    static _makeArrayPtr(value) {\n        if (value === null) {\n            return null;\n        }\n        if (value.buffer) {\n            return value.buffer;\n        }\n        assert(value instanceof Buffer, 'Argument is not a Buffer.');\n        return value;\n    }\n\n    _makeCallbackPtr(value) {\n        if (value === null) {\n            return null;\n        }\n        if (value._makePtr) {\n            return value._makePtr(this.library);\n        }\n        assert(value instanceof Buffer, 'Argument is not a Buffer.');\n        return value;\n    }\n\n    _makeStringPtr(value) {\n        if (value === null) {\n            return null;\n        }\n        if (_.isString(value)) {\n            return native.makeStringBuffer(value);\n        }\n        assert(value instanceof Buffer, 'Argument is not a Buffer.');\n        return value;\n    }\n}\n\nmodule.exports = FastFunction;"]}