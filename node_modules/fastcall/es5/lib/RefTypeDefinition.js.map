{"version":3,"sources":["../../lib/RefTypeDefinition.js"],"names":["_","require","assert","verify","a","ert","ref","Parser","rex","RefTypeDefinition","library","propertyName","def","isObject","isString","parser","parsed","parseRefType","body","isFunction","factoryType","type","name","length","_body","_factoryType","_type","factory","makePtr","value","propName","Buffer","isPlainObject","isArray","buffer","undefined","TypeError","NULL","util","inspect","len","Number","parseInt","itemType","FactoryType","module","exports"],"mappings":"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","file":"RefTypeDefinition.js","sourcesContent":["/*\nCopyright 2016 Gábor Mező (gabor.mezo@outlook.com)\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\nconst _ = require('lodash');\nconst assert = require('assert');\nconst verify = require('./verify');\nconst a = verify.a;\nconst ert = verify.ert;\nconst ref = require('./ref-libs/ref');\nconst Parser = require('./Parser');\nconst rex = require('./rex');\n\nclass RefTypeDefinition {\n    constructor(library, propertyName, def) {\n        a&&ert(_.isObject(library), 'Argument \"library\" is not an object.');\n        a&&ert(_.isString(propertyName), 'Argument \"propertyName\" is not a string.');\n        this.library = library;\n        this.propertyName = propertyName;\n\n        const parser = new Parser(library);\n        const parsed = parser.parseRefType(def, propertyName);\n        a&&ert(_.isObject(parsed));\n        a&&ert(parsed.body);\n        a&&ert(_.isFunction(parsed.factoryType));\n        a&&ert(parsed.type);\n        a&&ert(_.isString(parsed.name) && parsed.name.length);\n\n        this.name = parsed.name;\n        this._body = parsed.body;\n        this._factoryType = parsed.factoryType;\n        this._type = parsed.type;\n        this._type[this.propertyName] = this;\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    getFactory() {\n        const factory = value => this.makePtr(value);\n        factory[this.propertyName] = this;\n        factory.type = this.type;\n        return factory;\n    }\n\n    makePtr(value) {\n        const propName = this.propertyName;\n        if (value) {\n            if (value instanceof Buffer) {\n                return value;\n            }\n\n            if (_.isPlainObject(value) || _.isArray(value) || _.isString(value)) {\n                value = new this.type(value);\n            }\n\n            if (value.buffer instanceof Buffer) {\n                value = value.buffer;\n            }\n            else if (_.isFunction(value.ref)) {\n                value = value.ref();\n            }\n\n            if (_.isObject(value)) {\n                if (value.type === undefined) {\n                    value.type = this.type;\n                }\n\n                if (value[propName] === undefined) {\n                    value[propName] = this;\n                }\n\n                if (value[propName] === this) {\n                    return value;\n                }\n\n                throw new TypeError('Buffer is not a ' + propName + ' pointer.');\n            }\n        }\n        else if (value === null) {\n            return ref.NULL;\n        }\n        throw new TypeError(`Cannot make ${ propName } from: ${ util.inspect(value) }`);\n    }\n\n    _makeTypeWithLength(len) {\n        len = _.isString(len) ? Number.parseInt(len) : len;\n        let itemType = this._body;\n        let FactoryType = this._factoryType;\n        assert(len > 0 && itemType && _.isFunction(FactoryType), 'Invalid array type definition.');\n        return new FactoryType(itemType, len);\n    }\n}\n\nmodule.exports = RefTypeDefinition;"]}