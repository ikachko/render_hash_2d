{"version":3,"sources":["../../lib/FunctionParser.js"],"names":["_","require","assert","verify","a","ert","ref","util","rex","FunctionParser","parser","def","isPlainObject","_parseObject","isString","_parseString","keys","length","name","arr","isArray","resultType","_makeRef","args","i","push","type","match","matchFunction","map","_parseDeclaration","arg","title","defaultName","isInterface","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA;;;;;;AACA,IAAMA,IAAIC,QAAQ,QAAR,CAAV;AACA,IAAMC,SAASD,QAAQ,QAAR,CAAf;AACA,IAAME,SAASF,QAAQ,UAAR,CAAf;AACA,IAAMG,IAAID,OAAOC,CAAjB;AACA,IAAMC,MAAMF,OAAOE,GAAnB;AACA,IAAMC,MAAML,QAAQ,gBAAR,CAAZ;AACA,IAAMM,OAAON,QAAQ,MAAR,CAAb;AACA,IAAMO,MAAMP,QAAQ,OAAR,CAAZ;;IAEMQ,c;AACF,4BAAYC,MAAZ,EAAoB;AAAA;;AAChBN,aAAGC,IAAIK,MAAJ,CAAH;;AAEA,aAAKA,MAAL,GAAcA,MAAd;AACH;;;;8BAEKC,G,EAAK;AACP,gBAAIX,EAAEY,aAAF,CAAgBD,GAAhB,CAAJ,EAA0B;AACtB,uBAAO,KAAKE,YAAL,CAAkBF,GAAlB,CAAP;AACH;AACD,gBAAIX,EAAEc,QAAF,CAAWH,GAAX,CAAJ,EAAqB;AACjB,uBAAO,KAAKI,YAAL,CAAkBJ,GAAlB,CAAP;AACH;AACDT,mBAAO,KAAP,EAAc,wCAAd;AACH;;;qCAEYS,G,EAAK;AACd;AACA,gBAAMK,OAAOhB,EAAEgB,IAAF,CAAOL,GAAP,CAAb;AACAT,mBAAOc,KAAKC,MAAL,KAAgB,CAAvB,EAA0B,oCAA1B;AACA,gBAAMC,OAAOF,KAAK,CAAL,CAAb;AACA,gBAAMG,MAAMR,IAAIO,IAAJ,CAAZ;AACAhB,mBAAOF,EAAEoB,OAAF,CAAUD,GAAV,CAAP,EAAuB,qCAAvB;AACAjB,mBAAOiB,IAAIF,MAAJ,GAAa,CAApB,EAAuB,qCAAvB;AACA,gBAAMI,aAAa,KAAKX,MAAL,CAAYY,QAAZ,CAAqBH,IAAI,CAAJ,CAArB,CAAnB;AACA,gBAAMI,OAAO,EAAb;AACA,gBAAIvB,EAAEoB,OAAF,CAAUD,IAAI,CAAJ,CAAV,CAAJ,EAAuB;AACnB,qBAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAIL,IAAI,CAAJ,EAAOF,MAA3B,EAAmCO,GAAnC,EAAwC;AACpCD,yBAAKE,IAAL,CAAU;AACNP,8BAAM,QAAQM,CADR;AAENE,8BAAM,KAAKhB,MAAL,CAAYY,QAAZ,CAAqBH,IAAI,CAAJ,EAAOK,CAAP,CAArB;AAFA,qBAAV;AAIH;AACJ;AACD,mBAAO,EAAEH,sBAAF,EAAcH,UAAd,EAAoBK,UAApB,EAAP;AACH;;;qCAEYZ,G,EAAK;AAAA;;AACd,gBAAMgB,QAAQnB,IAAIoB,aAAJ,CAAkBjB,GAAlB,CAAd;AACAT,mBAAOyB,KAAP,EAAc,qCAAd;AACA,gBAAMN,aAAa,KAAKX,MAAL,CAAYY,QAAZ,CAAqBK,MAAMN,UAA3B,CAAnB;AACA,gBAAIG,IAAI,CAAR;AACA,gBAAMD,OAAOI,MAAMJ,IAAN,CAAWM,GAAX,CAAe;AAAA,uBAAO,MAAKnB,MAAL,CAAYoB,iBAAZ,CAA8B;AAC7DnB,yBAAKoB,GADwD;AAE7DC,2BAAO,UAFsD;AAG7DC,iCAAa,QAAQT,GAHwC;AAI7DU,iCAAa;AAJgD,iBAA9B,CAAP;AAAA,aAAf,CAAb;AAMA,mBAAO;AACHb,sCADG;AAEHH,sBAAMS,MAAMT,IAFT;AAGHK;AAHG,aAAP;AAKH;;;;;;AAGLY,OAAOC,OAAP,GAAiB3B,cAAjB","file":"FunctionParser.js","sourcesContent":["/*\nCopyright 2016 Gábor Mező (gabor.mezo@outlook.com)\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\nconst _ = require('lodash');\nconst assert = require('assert');\nconst verify = require('./verify');\nconst a = verify.a;\nconst ert = verify.ert;\nconst ref = require('./ref-libs/ref');\nconst util = require('util');\nconst rex = require('./rex');\n\nclass FunctionParser {\n    constructor(parser) {\n        a&&ert(parser);\n\n        this.parser = parser;\n    }\n\n    parse(def) {\n        if (_.isPlainObject(def)) {\n            return this._parseObject(def);\n        }\n        if (_.isString(def)) {\n            return this._parseString(def);\n        }\n        assert(false, 'Argument is not a function definition.');\n    }\n\n    _parseObject(def) {\n        // node-ffi format\n        const keys = _.keys(def);\n        assert(keys.length === 1, 'Object has invalid number of keys.');\n        const name = keys[0];\n        const arr = def[name];\n        assert(_.isArray(arr), 'Function definition array expected.');\n        assert(arr.length > 1, 'Function definition array is empty.');\n        const resultType = this.parser._makeRef(arr[0]);\n        const args = [];\n        if (_.isArray(arr[1])) {\n            for (let i = 0; i < arr[1].length; i++) {\n                args.push({\n                    name: 'arg' + i,\n                    type: this.parser._makeRef(arr[1][i])\n                });\n            }\n        }\n        return { resultType, name, args };\n    }\n\n    _parseString(def) {\n        const match = rex.matchFunction(def);\n        assert(match, 'Invalid function definition format.');\n        const resultType = this.parser._makeRef(match.resultType);\n        let i = 0;\n        const args = match.args.map(arg => this.parser._parseDeclaration({\n            def: arg,\n            title: 'argument',\n            defaultName: 'arg' + i++,\n            isInterface: true\n        }));\n        return {\n            resultType,\n            name: match.name,\n            args\n        };\n    }\n}\n\nmodule.exports = FunctionParser;"]}