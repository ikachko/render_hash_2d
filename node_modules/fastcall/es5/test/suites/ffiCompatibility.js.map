{"version":3,"sources":["../../../test/suites/ffiCompatibility.js"],"names":["ffi","require","ref","ArrayType","UnionType","StructType","Library","Callback","FfiFunction","Function","helpers","assert","_","Promise","async","coroutine","describe","libPath","before","findTestlib","it","isObject","isFunction","lib","mul","getString","equal","readCString","release","done","asyncPromise","err","res","setImmediate","isUndefined","cbFunc","types","float","makeInt","v","cb","double","cb2","toPointer","deepEqual","keys","_library","callbacks","IntArray","isArrayNull","TRecWithArray","values","long","index","TRecWithArrays","incRecWithArrays","structs","arrays","records","get","i","TUnion","a","b","c","TTaggedUnion","tag","data","getValueFromTaggedUnion","refType","unions","struct","charCodeAt","result","ImageFormat","imageChannelOrder","imageChannelDataType","Context","MemFlags","uint64","MemObjectType","uint","ImageFormatArray","clGetSupportedImageFormats","numFormats","alloc","handle","deref","appendChar","CString","readChar","str","allocCString","newStr","StringArray","concatStrings","arr","set","out","Buffer","fill","length"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA;;AACA,IAAMA,MAAMC,QAAQ,WAAR,EAAqBD,GAAjC;AACA,IAAME,MAAMF,IAAIE,GAAhB;AACA,IAAMC,YAAYH,IAAIG,SAAtB;AACA,IAAMC,YAAYJ,IAAII,SAAtB;AACA,IAAMC,aAAaL,IAAIK,UAAvB;AACA,IAAMC,UAAUN,IAAIM,OAApB;AACA,IAAMC,WAAWP,IAAIO,QAArB;AACA,IAAMC,cAAcR,IAAIS,QAAxB;AACA,IAAMC,UAAUT,QAAQ,WAAR,CAAhB;AACA,IAAMU,SAASV,QAAQ,QAAR,CAAf;AACA,IAAMW,IAAIX,QAAQ,QAAR,CAAV;AACA,IAAMY,UAAUZ,QAAQ,UAAR,CAAhB;AACA,IAAMa,QAAQD,QAAQE,SAAtB;;AAEAC,SAAS,mBAAT,EAA8B,YAAY;AACtC,QAAIC,UAAU,IAAd;AACAC,WAAOJ,4CAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACOJ,QAAQS,WAAR,EADP;;AAAA;AACTF,+BADS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAN,EAAP;;AAIAG,OAAG,6BAAH,EAAkC,YAAY;AAC1CT,eAAOC,EAAES,QAAF,CAAWrB,GAAX,CAAP;AACAW,eAAOC,EAAES,QAAF,CAAWnB,GAAX,CAAP;AACAS,eAAOC,EAAEU,UAAF,CAAanB,SAAb,CAAP;AACAQ,eAAOC,EAAEU,UAAF,CAAalB,SAAb,CAAP;AACAO,eAAOC,EAAEU,UAAF,CAAajB,UAAb,CAAP;AACAM,eAAOC,EAAEU,UAAF,CAAahB,OAAb,CAAP;AACAK,eAAOC,EAAEU,UAAF,CAAaf,QAAb,CAAP;AACH,KARD;;AAUAS,aAAS,WAAT,EAAsB,YAAY;AAC9BI,WAAG,uCAAH,EAA4C,YAAY;AACpD,gBAAMG,MAAMvB,IAAIM,OAAJ,CAAYW,OAAZ,EAAqB;AAC7BO,qBAAK,CAAE,KAAF,EAAS,CAAE,KAAF,EAAS,KAAT,CAAT,CADwB;AAE7BC,2BAAW,CAAE,OAAF,EAAW,EAAX;AAFkB,aAArB,CAAZ;;AAKA,gBAAI;AACAd,uBAAOC,EAAEU,UAAF,CAAaC,IAAIC,GAAjB,CAAP;AACAb,uBAAOe,KAAP,CAAaH,IAAIC,GAAJ,CAAQ,EAAR,EAAY,CAAZ,CAAb,EAA6B,EAA7B;AACAb,uBAAOe,KAAP,CAAaxB,IAAIyB,WAAJ,CAAgBJ,IAAIE,SAAJ,EAAhB,CAAb,EAA+C,OAA/C;AACH,aAJD,SAKQ;AACJF,oBAAIK,OAAJ;AACH;AACJ,SAdD;;AAgBAZ,iBAAS,OAAT,EAAkB,YAAY;AAC1BI,eAAG,sBAAH,EAA2B,UAAUS,IAAV,EAAgB;AACvC,oBAAMN,MAAMvB,IAAIM,OAAJ,CAAYW,OAAZ,EAAqB;AAC7BO,yBAAK,CAAE,KAAF,EAAS,CAAE,KAAF,EAAS,KAAT,CAAT;AADwB,iBAArB,CAAZ;;AAIA,oBAAI;AACAb,2BAAOC,EAAEU,UAAF,CAAaC,IAAIC,GAAjB,CAAP;AACAb,2BAAOC,EAAEU,UAAF,CAAaC,IAAIC,GAAJ,CAAQV,KAArB,CAAP;AACAH,2BAAOC,EAAEU,UAAF,CAAaC,IAAIC,GAAJ,CAAQM,YAArB,CAAP;AACAP,wBAAIC,GAAJ,CAAQV,KAAR,CAAc,EAAd,EAAkB,CAAlB,EAAqB,UAACiB,GAAD,EAAMC,GAAN,EAAc;AAC/BC,qCAAa;AAAA,mCAAMV,IAAIK,OAAJ,EAAN;AAAA,yBAAb;AACA,4BAAIG,GAAJ,EAAS;AACLF,iCAAKE,GAAL;AACH;AACD,4BAAI;AACApB,mCAAOe,KAAP,CAAaM,GAAb,EAAkB,EAAlB;AACAH;AACH,yBAHD,CAIA,OAAOE,GAAP,EAAY;AACRF,iCAAKE,GAAL;AACH;AACJ,qBAZD;AAaH,iBAjBD,CAkBA,OAAOA,GAAP,EAAY;AACRR,wBAAIK,OAAJ;AACAC,yBAAKE,GAAL;AACH;AACJ,aA3BD;;AA6BAX,eAAG,sBAAH,EAA2B,UAAUS,IAAV,EAAgB;AACvC,oBAAMN,MAAMvB,IAAIM,OAAJ,CACRW,OADQ,EAER;AACIO,yBAAK,CAAE,KAAF,EAAS,CAAE,KAAF,EAAS,KAAT,CAAT;AADT,iBAFQ,EAKR;AACIV,2BAAO;AADX,iBALQ,CAAZ;;AASA,oBAAI;AACAH,2BAAOC,EAAEU,UAAF,CAAaC,IAAIC,GAAjB,CAAP;AACAb,2BAAOC,EAAEsB,WAAF,CAAcX,IAAIC,GAAJ,CAAQV,KAAtB,CAAP;AACAH,2BAAOC,EAAEU,UAAF,CAAaC,IAAIC,GAAJ,CAAQM,YAArB,CAAP;AACAP,wBAAIC,GAAJ,CAAQ,EAAR,EAAY,CAAZ,EAAe,UAACO,GAAD,EAAMC,GAAN,EAAc;AACzBC,qCAAa;AAAA,mCAAMV,IAAIK,OAAJ,EAAN;AAAA,yBAAb;AACA,4BAAIG,GAAJ,EAAS;AACLF,iCAAKE,GAAL;AACH;AACD,4BAAI;AACApB,mCAAOe,KAAP,CAAaM,GAAb,EAAkB,EAAlB;AACAH;AACH,yBAHD,CAIA,OAAOE,GAAP,EAAY;AACRF,iCAAKE,GAAL;AACH;AACJ,qBAZD;AAaH,iBAjBD,CAkBA,OAAOA,GAAP,EAAY;AACRR,wBAAIK,OAAJ;AACAC,yBAAKE,GAAL;AACH;AACJ,aAhCD;AAiCH,SA/DD;;AAiEAX,WAAG,mBAAH,EAAwBN,4CAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBS,+BADoB,GACdvB,IAAIM,OAAJ,CAAYW,OAAZ,EAAqB;AAC7BO,qCAAK,CAAE,KAAF,EAAS,CAAE,KAAF,EAAS,KAAT,CAAT;AADwB,6BAArB,CADc;AAAA;;AAMtBb,mCAAOC,EAAEU,UAAF,CAAaC,IAAIC,GAAjB,CAAP;AACAb,mCAAOC,EAAEU,UAAF,CAAaC,IAAIC,GAAJ,CAAQV,KAArB,CAAP;AACAH,mCAAOC,EAAEU,UAAF,CAAaC,IAAIC,GAAJ,CAAQM,YAArB,CAAP;AARsB,2CAStBnB,MATsB;AAAA;AAAA,mCASHY,IAAIC,GAAJ,CAAQM,YAAR,CAAqB,EAArB,EAAyB,CAAzB,CATG;;AAAA;AAAA;;AAAA,yCASfJ,KATe,kCAS0B,EAT1B;;AAAA;AAAA;;AAYtBH,gCAAIK,OAAJ;AAZsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAN,EAAxB;AAeH,KAjGD;;AAmGAZ,aAAS,UAAT,EAAqB,YAAY;AAC7BA,iBAAS,MAAT,EAAiB,YAAY;AACzBI,eAAG,8BAAH,EAAmC,YAAY;AAC3C,oBAAMe,SAAS,IAAI3B,WAAJ,CAAgB,KAAhB,EAAuB,CAACN,IAAIkC,KAAJ,CAAUC,KAAX,EAAkB,QAAlB,CAAvB,CAAf;AACA,oBAAMd,MAAMvB,IAAIM,OAAJ,CAAYW,OAAZ,EAAqB;AAC7BqB,6BAAS,CAAC,KAAD,EAAQ,CAAC,OAAD,EAAU,QAAV,EAAoBH,MAApB,CAAR;AADoB,iBAArB,CAAZ;;AAIA,oBAAI;AACA,wBAAII,IAAI,GAAR;AACA,wBAAMC,KAAK,IAAIjC,QAAJ,CACP,KADO,EACA,CAACL,IAAIkC,KAAJ,CAAUC,KAAX,EAAkB,QAAlB,CADA,EAEP,UAAUA,KAAV,EAAiBI,MAAjB,EAAyB;AACrB,+BAAOJ,QAAQI,MAAR,GAAiBF,CAAxB;AACH,qBAJM,CAAX;;AAMA,wBAAMG,MAAMP,OAAOQ,SAAP,CAAiB,UAAUN,KAAV,EAAiBI,MAAjB,EAAyB;AAClD,+BAAOJ,QAAQI,MAAR,GAAiBF,CAAxB;AACH,qBAFW,CAAZ;;AAIA5B,2BAAOC,EAAEU,UAAF,CAAaC,IAAIe,OAAjB,CAAP;AACA3B,2BAAOC,EAAEU,UAAF,CAAaC,IAAIe,OAAJ,CAAYxB,KAAzB,CAAP;AACAH,2BAAOC,EAAEU,UAAF,CAAaC,IAAIe,OAAJ,CAAYR,YAAzB,CAAP;AACAnB,2BAAOiC,SAAP,CAAiBhC,EAAEiC,IAAF,CAAOtB,IAAIuB,QAAJ,CAAaC,SAApB,CAAjB,EAAiD,EAAjD;AACApC,2BAAOe,KAAP,CAAaH,IAAIe,OAAJ,CAAY,IAAZ,EAAkB,CAAlB,EAAqBE,EAArB,CAAb,EAAuC,EAAvC;AACAD,yBAAK,GAAL;AACA5B,2BAAOe,KAAP,CAAaH,IAAIe,OAAJ,CAAY,IAAZ,EAAkB,CAAlB,EAAqBI,GAArB,CAAb,EAAwC,EAAxC;AACA/B,2BAAOiC,SAAP,CAAiBhC,EAAEiC,IAAF,CAAOtB,IAAIuB,QAAJ,CAAaC,SAApB,CAAjB,EAAiD,CAAC,cAAD,EAAiB,cAAjB,CAAjD;AACH,iBApBD,SAqBQ;AACJxB,wBAAIK,OAAJ;AACH;AACJ,aA9BD;AA+BH,SAhCD;;AAkCAZ,iBAAS,OAAT,EAAkB,YAAY;AAC1BI,eAAG,8BAAH,EAAmC,UAAUS,IAAV,EAAgB;AAC/C,oBAAMN,MAAMvB,IAAIM,OAAJ,CAAYW,OAAZ,EAAqB;AAC7BqB,6BAAS,CAAC,KAAD,EAAQ,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,CAAR;AADoB,iBAArB,CAAZ;;AAIA,oBAAI;AACA,wBAAME,KAAK,IAAIjC,QAAJ,CACP,KADO,EACA,CAACL,IAAIkC,KAAJ,CAAUC,KAAX,EAAkB,QAAlB,CADA,EAEP,UAAUA,KAAV,EAAiBI,MAAjB,EAAyB;AACrB,+BAAOJ,QAAQI,MAAR,GAAiB,GAAxB;AACH,qBAJM,CAAX;;AAMA9B,2BAAOC,EAAEU,UAAF,CAAaC,IAAIe,OAAjB,CAAP;AACA3B,2BAAOC,EAAEU,UAAF,CAAaC,IAAIe,OAAJ,CAAYxB,KAAzB,CAAP;AACAH,2BAAOC,EAAEU,UAAF,CAAaC,IAAIe,OAAJ,CAAYR,YAAzB,CAAP;AACAnB,2BAAOiC,SAAP,CAAiBhC,EAAEiC,IAAF,CAAOtB,IAAIuB,QAAJ,CAAaC,SAApB,CAAjB,EAAiD,EAAjD;AACAxB,wBAAIe,OAAJ,CAAYxB,KAAZ,CAAkB,IAAlB,EAAwB,CAAxB,EAA2B0B,EAA3B,EAA+B,UAACT,GAAD,EAAMC,GAAN,EAAc;AACzCC,qCAAa;AAAA,mCAAMV,IAAIK,OAAJ,EAAN;AAAA,yBAAb;AACA,4BAAIG,GAAJ,EAAS;AACLF,iCAAKE,GAAL;AACH;AACD,4BAAI;AACApB,mCAAOe,KAAP,CAAaM,GAAb,EAAkB,EAAlB;AACArB,mCAAOiC,SAAP,CAAiBhC,EAAEiC,IAAF,CAAOtB,IAAIuB,QAAJ,CAAaC,SAApB,CAAjB,EAAiD,CAAC,cAAD,CAAjD;AACAlB;AACH,yBAJD,CAKA,OAAOE,GAAP,EAAY;AACRF,iCAAKE,GAAL;AACH;AACJ,qBAbD;AAcH,iBAzBD,CA0BA,OAAOA,GAAP,EAAY;AACRR,wBAAIK,OAAJ;AACAC,yBAAKE,GAAL;AACH;AACJ,aAnCD;AAoCH,SArCD;AAsCH,KAzED;;AA2EAf,aAAS,OAAT,EAAkB,YAAY;AAC1B,YAAIO,YAAJ;AACA,YAAIyB,iBAAJ;AACA9B,eAAO,YAAY;AACf8B,uBAAW,IAAI7C,SAAJ,CAAc,KAAd,CAAX;AACAoB,kBAAMvB,IAAIM,OAAJ,CAAYW,OAAZ,EAAqB;AACvBgC,6BAAa,CAAE,MAAF,EAAU,CAAED,QAAF,CAAV;AADU,aAArB,CAAN;AAGH,SALD;;AAOA5B,WAAG,mBAAH,EAAwB,YAAY;AAChC,gBAAMY,MAAMT,IAAI0B,WAAJ,CAAgB,IAAID,QAAJ,CAAa,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAb,CAAhB,CAAZ;AACArC,mBAAO,CAACqB,GAAR;AACH,SAHD;;AAKAZ,WAAG,cAAH,EAAmB,YAAY;AAC3BT,mBAAOY,IAAI0B,WAAJ,CAAgB,IAAhB,CAAP;AACH,SAFD;AAGH,KAlBD;;AAoBAjC,aAAS,kBAAT,EAA6B,YAAY;AACrCI,WAAG,cAAH,EAAmB,YAAY;AAC3B,gBAAM8B,gBAAgB,IAAI7C,UAAJ,CAAe;AACjC8C,wBAAQ,IAAIhD,SAAJ,CAAcD,IAAIkC,KAAJ,CAAUgB,IAAxB,EAA8B,CAA9B,CADyB;AAEjCC,uBAAO;AAF0B,aAAf,CAAtB;AAIA,gBAAMC,iBAAiB,IAAInD,SAAJ,CAAc+C,aAAd,CAAvB;AACA,gBAAM3B,MAAMvB,IAAIM,OAAJ,CAAYW,OAAZ,EAAqB;AAC7BsC,kCAAkB,CAAE,MAAF,EAAU,CAAED,cAAF,EAAkB,MAAlB,CAAV;AADW,aAArB,CAAZ;AAGA3C,mBAAOiC,SAAP,CAAiBhC,EAAEiC,IAAF,CAAOtB,IAAIuB,QAAJ,CAAaU,OAApB,CAAjB,EAA+C,CAAC,aAAD,CAA/C;AACA7C,mBAAOiC,SAAP,CAAiBhC,EAAEiC,IAAF,CAAOtB,IAAIuB,QAAJ,CAAaW,MAApB,CAAjB,EAA8C,EAA9C;;AAEA,gBAAI;AACA,oBAAMC,UAAU,IAAIJ,cAAJ,CAAmB,CAC/B;AACID,2BAAO,CADX;AAEIF,4BAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb;AAFZ,iBAD+B,EAK/B,IAAID,aAAJ,CAAkB;AACdG,2BAAO,CADO;AAEdF,4BAAQ,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAC,CAAV,EAAa,CAAC,CAAd,EAAiB,CAAC,CAAlB;AAFM,iBAAlB,CAL+B,CAAnB,CAAhB;;AAWA5B,oBAAIgC,gBAAJ,CAAqBG,OAArB,EAA8B,CAA9B;AACA/C,uBAAOiC,SAAP,CAAiBhC,EAAEiC,IAAF,CAAOtB,IAAIuB,QAAJ,CAAaU,OAApB,CAAjB,EAA+C,CAAC,aAAD,CAA/C;AACA7C,uBAAOiC,SAAP,CAAiBhC,EAAEiC,IAAF,CAAOtB,IAAIuB,QAAJ,CAAaW,MAApB,CAAjB,EAA8C,EAA9C;;AAEA9C,uBAAOe,KAAP,CAAagC,QAAQC,GAAR,CAAY,CAAZ,EAAeN,KAA5B,EAAmC,CAAnC;AACA1C,uBAAOe,KAAP,CAAagC,QAAQC,GAAR,CAAY,CAAZ,EAAeN,KAA5B,EAAmC,CAAnC;;AAEA,qBAAK,IAAIO,IAAI,CAAb,EAAgBA,IAAI,CAApB,EAAuBA,GAAvB,EAA4B;AACxBjD,2BAAOe,KAAP,CAAagC,QAAQC,GAAR,CAAY,CAAZ,EAAeR,MAAf,CAAsBQ,GAAtB,CAA0BC,CAA1B,CAAb,EAA2CA,IAAI,CAA/C;AACAjD,2BAAOe,KAAP,CAAagC,QAAQC,GAAR,CAAY,CAAZ,EAAeR,MAAf,CAAsBQ,GAAtB,CAA0BC,CAA1B,CAAb,EAA2C,CAAC,CAAD,GAAKA,CAAhD;AACH;AACJ,aAvBD,SAwBQ;AACJrC,oBAAIK,OAAJ;AACH;AACJ,SAvCD;AAwCH,KAzCD;;AA2CAZ,aAAS,cAAT,EAAyB,YAAY;AACjCI,WAAG,cAAH,EAAmB,YAAY;AAC3B,gBAAMyC,SAAS,IAAIzD,SAAJ,CAAc;AACzB0D,mBAAG,OADsB;AAEzBC,mBAAG,OAFsB;AAGzBC,mBAAG;AAHsB,aAAd,CAAf;AAKA,gBAAMC,eAAe,IAAI5D,UAAJ,CAAe;AAChC6D,qBAAK,MAD2B;AAEhCC,sBAAMN;AAF0B,aAAf,CAArB;AAIA,gBAAMtC,MAAMvB,IAAIM,OAAJ,CAAYW,OAAZ,EAAqB;AAC7BmD,yCAAyB,CAAE,OAAF,EAAW,CAAElE,IAAImE,OAAJ,CAAYJ,YAAZ,CAAF,CAAX;AADI,aAArB,CAAZ;AAGAtD,mBAAOiC,SAAP,CAAiBhC,EAAEiC,IAAF,CAAOtB,IAAIuB,QAAJ,CAAawB,MAApB,CAAjB,EAA8C,EAA9C;AACA3D,mBAAOiC,SAAP,CAAiBhC,EAAEiC,IAAF,CAAOtB,IAAIuB,QAAJ,CAAaU,OAApB,CAAjB,EAA+C,CAAC,aAAD,CAA/C;;AAEA,gBAAI;AACA,oBAAIe,SAAS,IAAIN,YAAJ,CAAiB;AAC1BC,yBAAK,IAAIM,UAAJ,CAAe,CAAf,CADqB;AAE1BL,0BAAM,EAAEJ,GAAG,EAAL;AAFoB,iBAAjB,CAAb;;AAKApD,uBAAOC,EAAES,QAAF,CAAWkD,MAAX,CAAP;AACA5D,uBAAOe,KAAP,CAAa6C,OAAOL,GAApB,EAAyB,IAAIM,UAAJ,CAAe,CAAf,CAAzB;AACA7D,uBAAOe,KAAP,CAAa6C,OAAOJ,IAAP,CAAYJ,CAAzB,EAA4B,EAA5B;;AAEA,oBAAIU,SAASlD,IAAI6C,uBAAJ,CAA4BG,OAAOrE,GAAP,EAA5B,CAAb;AACAS,uBAAOe,KAAP,CAAa+C,MAAb,EAAqB,EAArB;;AAEAF,yBAAS,IAAIN,YAAJ,CAAiB;AACtBC,yBAAK,IAAIM,UAAJ,CAAe,CAAf,CADiB;AAEtBL,0BAAM,IAAIN,MAAJ,CAAW,EAAEE,GAAG,EAAL,EAAX;AAFgB,iBAAjB,CAAT;;AAKApD,uBAAOC,EAAES,QAAF,CAAWkD,MAAX,CAAP;AACA5D,uBAAOe,KAAP,CAAa6C,OAAOL,GAApB,EAAyB,IAAIM,UAAJ,CAAe,CAAf,CAAzB;AACA7D,uBAAOe,KAAP,CAAa6C,OAAOJ,IAAP,CAAYJ,CAAzB,EAA4B,EAA5B;;AAEAU,yBAASlD,IAAI6C,uBAAJ,CAA4BG,OAAOrE,GAAP,EAA5B,CAAT;AACAS,uBAAOe,KAAP,CAAa+C,MAAb,EAAqB,EAArB;;AAEA9D,uBAAOiC,SAAP,CAAiBhC,EAAEiC,IAAF,CAAOtB,IAAIuB,QAAJ,CAAawB,MAApB,CAAjB,EAA8C,EAA9C;AACA3D,uBAAOiC,SAAP,CAAiBhC,EAAEiC,IAAF,CAAOtB,IAAIuB,QAAJ,CAAaU,OAApB,CAAjB,EAA+C,CAAC,aAAD,CAA/C;AACH,aA3BD,SA4BQ;AACJjC,oBAAIK,OAAJ;AACH;AACJ,SA/CD;AAgDH,KAjDD;;AAmDAZ,aAAS,MAAT,EAAiB,YAAY;AACzBI,WAAG,mEAAH,EAAwE,YAAY;AAChF,gBAAMsD,cAAc,IAAIrE,UAAJ,CAAe;AAC/BsE,mCAAmB,MADY;AAE/BC,sCAAsB;AAFS,aAAf,CAApB;AAIA,gBAAMxC,QAAQ;AACVyC,yBAAS3E,IAAImE,OAAJ,CAAY,MAAZ,CADC;AAEVS,0BAAU5E,IAAIkC,KAAJ,CAAU2C,MAFV;AAGVC,+BAAe9E,IAAIkC,KAAJ,CAAU6C,IAHf;AAIVC,kCAAkB,IAAI/E,SAAJ,CAAcuE,WAAd;AAJR,aAAd;AAMA,gBAAMnD,MAAMvB,IAAIM,OAAJ,CAAYW,OAAZ,EAAqB;AAC7BkE,4CACA,CAAC,KAAD,EACI,CAAC/C,MAAMyC,OAAP,EACAzC,MAAM0C,QADN,EAEA1C,MAAM4C,aAFN,EAGA,MAHA,EAIA5C,MAAM8C,gBAJN,EAKAhF,IAAImE,OAAJ,CAAY,MAAZ,CALA,CADJ;AAF6B,aAArB,CAAZ;;AAWA,gBAAMc,6BAA6B5D,IAAI4D,0BAAvC;AACAxE,mBAAOC,EAAEU,UAAF,CAAa6D,0BAAb,CAAP;;AAEA,gBAAMC,aAAalF,IAAImF,KAAJ,CAAU,MAAV,CAAnB;AACA,gBAAMC,SAASpF,IAAImF,KAAJ,CAAU,MAAV,CAAf;AACA,gBAAMrD,MAAMmD,2BAA2BG,MAA3B,EAAmC,EAAnC,EAAuC,IAAvC,EAA6C,CAA7C,EAAgD,IAAhD,EAAsDF,UAAtD,CAAZ;;AAEAzE,mBAAOe,KAAP,CAAa0D,WAAWG,KAAX,EAAb,EAAiC,EAAjC;AACA5E,mBAAOe,KAAP,CAAaM,GAAb,EAAkB,IAAlB;AACH,SA/BD;;AAiCAhB,iBAAS,QAAT,EAAmB,YAAY;AAC3BI,eAAG,uCAAH,EAA4C,YAAY;AACpD,oBAAMG,MAAMvB,IAAIM,OAAJ,CAAYW,OAAZ,EAAqB;AAC7BuE,gCAAY,CAAC,MAAD,EAAS,CAACtF,IAAIkC,KAAJ,CAAUqD,OAAX,EAAoB,MAApB,EAA4B,MAA5B,CAAT,CADiB;AAE7BC,8BAAU,CAAC,MAAD,EAAS,CAAC,QAAD,EAAW,MAAX,CAAT;AAFmB,iBAArB,CAAZ;;AAKA,oBAAMF,aAAajE,IAAIiE,UAAvB;AACA7E,uBAAOC,EAAEU,UAAF,CAAakE,UAAb,CAAP;AACA,oBAAME,WAAWnE,IAAImE,QAArB;AACA/E,uBAAOC,EAAEU,UAAF,CAAaoE,QAAb,CAAP;;AAEA,oBAAMC,MAAMzF,IAAI0F,YAAJ,CAAiB,MAAjB,CAAZ;AACAJ,2BAAWG,GAAX,EAAgB,CAAhB,EAAmB,IAAInB,UAAJ,CAAe,CAAf,CAAnB;AACA,oBAAIqB,SAAS3F,IAAIyB,WAAJ,CAAgBgE,GAAhB,CAAb;AACAhF,uBAAOe,KAAP,CAAamE,MAAb,EAAqB,MAArB;AACAlF,uBAAOe,KAAP,CAAagE,SAASC,GAAT,EAAc,CAAd,CAAb,EAA+B,IAAInB,UAAJ,CAAe,CAAf,CAA/B;AACA7D,uBAAOe,KAAP,CAAagE,SAAS,KAAT,EAAgB,CAAhB,CAAb,EAAiC,IAAIlB,UAAJ,CAAe,CAAf,CAAjC;AACH,aAjBD;;AAmBApD,eAAG,mCAAH,EAAwC,YAAY;AAChD,oBAAM0E,cAAc,IAAI3F,SAAJ,CAAc,QAAd,CAApB;AACA,oBAAMoB,MAAMvB,IAAIM,OAAJ,CAAYW,OAAZ,EAAqB;AAC7B8E,mCAAe,CAAC,MAAD,EAAS,CAACD,WAAD,EAAc,MAAd,EAAsB,QAAtB,CAAT;AADc,iBAArB,CAAZ;;AAIA,oBAAMC,gBAAgBxE,IAAIwE,aAA1B;AACApF,uBAAOC,EAAEU,UAAF,CAAayE,aAAb,CAAP;;AAEA,oBAAMC,MAAM,IAAIF,WAAJ,CAAgB,CAAhB,CAAZ;AACAE,oBAAIC,GAAJ,CAAQ,CAAR,EAAW,MAAX;AACAD,oBAAIC,GAAJ,CAAQ,CAAR,EAAW,OAAX;AACAD,oBAAIC,GAAJ,CAAQ,CAAR,EAAW,MAAX;AACA,oBAAMC,MAAM,IAAIC,MAAJ,CAAW,GAAX,CAAZ;AACAD,oBAAIE,IAAJ,CAAS,CAAT;;AAEAL,8BAAcC,GAAd,EAAmBA,IAAIK,MAAvB,EAA+BH,GAA/B;AACAvF,uBAAOe,KAAP,CAAaxB,IAAIyB,WAAJ,CAAgBuE,GAAhB,CAAb,EAAmC,eAAnC;AACH,aAlBD;AAmBH,SAvCD;AAwCH,KA1ED;AA2EH,CA3XD","file":"ffiCompatibility.js","sourcesContent":["/*\nCopyright 2016 Gábor Mező (gabor.mezo@outlook.com)\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\nconst ffi = require('../../lib').ffi;\nconst ref = ffi.ref;\nconst ArrayType = ffi.ArrayType;\nconst UnionType = ffi.UnionType;\nconst StructType = ffi.StructType;\nconst Library = ffi.Library;\nconst Callback = ffi.Callback;\nconst FfiFunction = ffi.Function;\nconst helpers = require('./helpers');\nconst assert = require('assert');\nconst _ = require('lodash');\nconst Promise = require('bluebird');\nconst async = Promise.coroutine;\n\ndescribe('ffi compatibility', function () {\n    let libPath = null;\n    before(async(function* () {\n        libPath = yield helpers.findTestlib();\n    }));\n\n    it('supports required interface', function () {\n        assert(_.isObject(ffi));\n        assert(_.isObject(ref));\n        assert(_.isFunction(ArrayType));\n        assert(_.isFunction(UnionType));\n        assert(_.isFunction(StructType));\n        assert(_.isFunction(Library));\n        assert(_.isFunction(Callback));\n    });\n\n    describe('functions', function () {\n        it('supports multiple function definition', function () {\n            const lib = ffi.Library(libPath, {\n                mul: [ 'int', [ 'int', 'int' ]],\n                getString: [ 'char*', [] ]\n            });\n\n            try {\n                assert(_.isFunction(lib.mul));\n                assert.equal(lib.mul(21, 2), 42);\n                assert.equal(ref.readCString(lib.getString()), 'world');\n            }\n            finally {\n                lib.release();\n            }\n        });\n\n        describe('async', function () {\n            it('supported explicitly', function (done) {\n                const lib = ffi.Library(libPath, {\n                    mul: [ 'int', [ 'int', 'int' ]]\n                });\n\n                try {\n                    assert(_.isFunction(lib.mul));\n                    assert(_.isFunction(lib.mul.async));\n                    assert(_.isFunction(lib.mul.asyncPromise));\n                    lib.mul.async(21, 2, (err, res) => {\n                        setImmediate(() => lib.release());\n                        if (err) {\n                            done(err);\n                        }\n                        try {\n                            assert.equal(res, 42);\n                            done();\n                        }\n                        catch (err) {\n                            done(err);\n                        }\n                    });\n                }\n                catch (err) {\n                    lib.release();\n                    done(err);\n                }\n            });\n\n            it('supported in options', function (done) {\n                const lib = ffi.Library(\n                    libPath, \n                    {\n                        mul: [ 'int', [ 'int', 'int' ]]\n                    },\n                    {\n                        async: true\n                    });\n\n                try {\n                    assert(_.isFunction(lib.mul));\n                    assert(_.isUndefined(lib.mul.async));\n                    assert(_.isFunction(lib.mul.asyncPromise));\n                    lib.mul(21, 2, (err, res) => {\n                        setImmediate(() => lib.release());\n                        if (err) {\n                            done(err);\n                        }\n                        try {\n                            assert.equal(res, 42);\n                            done();\n                        }\n                        catch (err) {\n                            done(err);\n                        }\n                    });\n                }\n                catch (err) {\n                    lib.release();\n                    done(err);\n                }\n            });\n        });\n\n        it('supports promises', async(function* () {\n            const lib = ffi.Library(libPath, {\n                mul: [ 'int', [ 'int', 'int' ]]\n            });\n\n            try {\n                assert(_.isFunction(lib.mul));\n                assert(_.isFunction(lib.mul.async));\n                assert(_.isFunction(lib.mul.asyncPromise));\n                assert.equal(yield lib.mul.asyncPromise(21, 2), 42);\n            }\n            finally {\n                lib.release();\n            }\n        }));\n    });\n\n    describe('callback', function () {\n        describe('sync', function () {\n            it('supports ffi-style callbacks', function () {\n                const cbFunc = new FfiFunction('int', [ref.types.float, 'double']);\n                const lib = ffi.Library(libPath, {\n                    makeInt: ['int', ['float', 'double', cbFunc] ]\n                });\n\n                try {\n                    let v = 0.1;\n                    const cb = new Callback(\n                        'int', [ref.types.float, 'double'],\n                        function (float, double) {\n                            return float + double + v; \n                        });\n\n                    const cb2 = cbFunc.toPointer(function (float, double) {\n                        return float + double + v; \n                    });\n                    \n                    assert(_.isFunction(lib.makeInt));\n                    assert(_.isFunction(lib.makeInt.async));\n                    assert(_.isFunction(lib.makeInt.asyncPromise));\n                    assert.deepEqual(_.keys(lib._library.callbacks), []);\n                    assert.equal(lib.makeInt(19.9, 2, cb), 42);\n                    v += 0.1;\n                    assert.equal(lib.makeInt(19.9, 2, cb2), 44);\n                    assert.deepEqual(_.keys(lib._library.callbacks), ['FFICallback0', 'FFICallback1']);\n                }\n                finally {\n                    lib.release();\n                }\n            });\n        });\n\n        describe('async', function () {\n            it('supports ffi-style callbacks', function (done) {\n                const lib = ffi.Library(libPath, {\n                    makeInt: ['int', ['float', 'double', 'pointer'] ]\n                });\n\n                try {\n                    const cb = new Callback(\n                        'int', [ref.types.float, 'double'],\n                        function (float, double) {\n                            return float + double + 0.1; \n                        });\n\n                    assert(_.isFunction(lib.makeInt));\n                    assert(_.isFunction(lib.makeInt.async));\n                    assert(_.isFunction(lib.makeInt.asyncPromise));\n                    assert.deepEqual(_.keys(lib._library.callbacks), []);\n                    lib.makeInt.async(19.9, 2, cb, (err, res) => {\n                        setImmediate(() => lib.release());\n                        if (err) {\n                            done(err);\n                        }\n                        try {\n                            assert.equal(res, 42);\n                            assert.deepEqual(_.keys(lib._library.callbacks), ['FFICallback0']);\n                            done();\n                        }\n                        catch (err) {\n                            done(err);\n                        }\n                    });\n                }\n                catch (err) {\n                    lib.release();\n                    done(err);\n                }\n            });\n        });\n    });\n\n    describe('array', function () {\n        let lib;\n        let IntArray;\n        before(function () {\n            IntArray = new ArrayType('int');\n            lib = ffi.Library(libPath, {\n                isArrayNull: [ 'bool', [ IntArray ]]\n            });\n        });\n\n        it('accepts non nulls', function () {\n            const res = lib.isArrayNull(new IntArray([1, 2, 3]));\n            assert(!res);\n        });\n\n        it('accepts null', function () {\n            assert(lib.isArrayNull(null));\n        });\n    });\n\n    describe('array of structs', function () {\n        it('is supported', function () {\n            const TRecWithArray = new StructType({\n                values: new ArrayType(ref.types.long, 5),\n                index: 'uint',\n            });\n            const TRecWithArrays = new ArrayType(TRecWithArray);\n            const lib = ffi.Library(libPath, {\n                incRecWithArrays: [ 'void', [ TRecWithArrays, 'long' ]]\n            });\n            assert.deepEqual(_.keys(lib._library.structs), ['StructType0']);\n            assert.deepEqual(_.keys(lib._library.arrays), []);\n            \n            try {\n                const records = new TRecWithArrays([\n                    {\n                        index: 4,\n                        values: [3, 4, 5, 6, 7]\n                    },\n                    new TRecWithArray({\n                        index: 5,\n                        values: [-3, -4, -5, -6, -7]\n                    })\n                ]);\n\n                lib.incRecWithArrays(records, 2);\n                assert.deepEqual(_.keys(lib._library.structs), ['StructType0']);\n                assert.deepEqual(_.keys(lib._library.arrays), []);\n\n                assert.equal(records.get(0).index, 5);\n                assert.equal(records.get(1).index, 6);\n\n                for (let i = 0; i < 5; i++) {\n                    assert.equal(records.get(0).values.get(i), i + 4);\n                    assert.equal(records.get(1).values.get(i), -2 - i);\n                }\n            }\n            finally {\n                lib.release();\n            }\n        });\n    });\n\n    describe('tagged union', function () {\n        it('is supported', function () {\n            const TUnion = new UnionType({\n                a: 'short',\n                b: 'int64',\n                c: 'long'\n            });\n            const TTaggedUnion = new StructType({\n                tag: 'char',\n                data: TUnion\n            });\n            const lib = ffi.Library(libPath, {\n                getValueFromTaggedUnion: [ 'int64', [ ref.refType(TTaggedUnion) ]]\n            });\n            assert.deepEqual(_.keys(lib._library.unions), []);\n            assert.deepEqual(_.keys(lib._library.structs), ['StructType0']);\n\n            try {\n                let struct = new TTaggedUnion({\n                    tag: 'b'.charCodeAt(0),\n                    data: { b: 42 }\n                });\n\n                assert(_.isObject(struct));\n                assert.equal(struct.tag, 'b'.charCodeAt(0));\n                assert.equal(struct.data.b, 42);\n\n                let result = lib.getValueFromTaggedUnion(struct.ref());\n                assert.equal(result, 42);\n\n                struct = new TTaggedUnion({\n                    tag: 'b'.charCodeAt(0),\n                    data: new TUnion({ b: 42 })\n                });\n\n                assert(_.isObject(struct));\n                assert.equal(struct.tag, 'b'.charCodeAt(0));\n                assert.equal(struct.data.b, 42);\n\n                result = lib.getValueFromTaggedUnion(struct.ref());\n                assert.equal(result, 42);\n\n                assert.deepEqual(_.keys(lib._library.unions), []);  \n                assert.deepEqual(_.keys(lib._library.structs), ['StructType0']);\n            }\n            finally {\n                lib.release();\n            }\n        });\n    });\n\n    describe('misc', function () {\n        it('should support OpenCL clGetSupportedImageFormats method interface', function () {\n            const ImageFormat = new StructType({\n                imageChannelOrder: 'uint',\n                imageChannelDataType: 'uint'\n            });\n            const types = {\n                Context: ref.refType('void'),\n                MemFlags: ref.types.uint64,\n                MemObjectType: ref.types.uint,\n                ImageFormatArray: new ArrayType(ImageFormat)\n            };\n            const lib = ffi.Library(libPath, {\n                clGetSupportedImageFormats: \n                ['int', \n                    [types.Context, \n                    types.MemFlags, \n                    types.MemObjectType, \n                    'uint', \n                    types.ImageFormatArray, \n                    ref.refType('uint')]]\n            });\n            \n            const clGetSupportedImageFormats = lib.clGetSupportedImageFormats;\n            assert(_.isFunction(clGetSupportedImageFormats));\n\n            const numFormats = ref.alloc('uint');\n            const handle = ref.alloc('void');\n            const res = clGetSupportedImageFormats(handle, 16, 4337, 0, null, numFormats);\n            \n            assert.equal(numFormats.deref(), 16);\n            assert.equal(res, 4337);\n        });\n\n        describe('string', function () {\n            it('should support \"string\" on interfaces', function () {\n                const lib = ffi.Library(libPath, {\n                    appendChar: ['void', [ref.types.CString, 'uint', 'char']],\n                    readChar: ['char', ['string', 'uint']]\n                });\n\n                const appendChar = lib.appendChar;\n                assert(_.isFunction(appendChar));\n                const readChar = lib.readChar;\n                assert(_.isFunction(readChar));\n\n                const str = ref.allocCString('bubu');\n                appendChar(str, 2, 'a'.charCodeAt(0));\n                let newStr = ref.readCString(str);\n                assert.equal(newStr, 'buau');\n                assert.equal(readChar(str, 2), 'a'.charCodeAt(0));\n                assert.equal(readChar('aba', 2), 'a'.charCodeAt(0));\n            });\n\n            it('should support array of \"strings\"', function () {\n                const StringArray = new ArrayType('string');\n                const lib = ffi.Library(libPath, {\n                    concatStrings: ['void', [StringArray, 'uint', 'string']]\n                });\n\n                const concatStrings = lib.concatStrings;\n                assert(_.isFunction(concatStrings));\n\n                const arr = new StringArray(3);\n                arr.set(0, 'bubu');\n                arr.set(1, 'kitty');\n                arr.set(2, 'fuck');\n                const out = new Buffer(100);\n                out.fill(0);\n\n                concatStrings(arr, arr.length, out);\n                assert.equal(ref.readCString(out), 'bubukittyfuck');\n            });\n        });\n    });\n});"]}