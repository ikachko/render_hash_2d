{"version":3,"sources":["../../../test/suites/libraryTests.js"],"names":["fastcall","require","Library","helpers","assert","_","ref","Promise","async","coroutine","describe","libPath","before","findTestlib","it","lib","isObject","initialize","equal","options","defaultCallMode","callMode","sync","release","throws","beforeEach","afterEach","function","mul","types","int","testMulSync","syncFunction","readLongPtr","refType","testReadLongPtrSync","writeString","testWriteStringSync","getString","testGetStringSync","getNumbers","testGetNumbersSync","callback","TMakeIntFunc","float","makeInt","testMakeIntSync","declaration","functions","interface","isFunction","toString","name","resultType","args","length","isString","type","long","data","Buffer","size","set","string","allocCString","readCString","isBuffer","indirection","double","doublePtrType","doublePtrPtr","alloc","sizeTPtr","deref","doublePtr","first","isNumber","reinterpret","get","callbackDecl","funcDecl","result","fv","dv","Math","floor","testMulAsync","asyncFunction","testReadLongPtrAsync","testWriteStringAsync","testGetStringAsync","testGetNumbersAsync","testMakeIntAsync","predeclaredCallback"],"mappings":"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","file":"libraryTests.js","sourcesContent":["'use strict';\nconst fastcall = require('../../lib');\nconst Library = fastcall.Library;\nconst helpers = require('./helpers');\nconst assert = require('assert');\nconst _ = require('lodash');\nconst ref = fastcall.ref;\nconst Promise = require('bluebird');\nconst async = Promise.coroutine;\n\ndescribe('Library', function () {\n    let libPath = null;\n    before(async(function* () {\n        libPath = yield helpers.findTestlib();\n    }));\n\n    describe('initialize', function () {\n        describe('without options', function () {\n            it('should init in sync mode as default', function () {\n                const lib = new Library(libPath);\n                try {\n                    assert(_.isObject(lib));\n                    lib.initialize();\n                    assert.equal(lib.options.defaultCallMode, Library.callMode.sync);\n                }\n                finally {\n                    lib.release();\n                }\n            });\n        });\n\n        describe('with options', function () {\n            it('should init in sync mode explicitly', function () {\n                const lib = new Library(libPath, { defaultCallMode: Library.callMode.sync });\n                try {\n                    assert(_.isObject(lib));\n                    lib.initialize();\n                    assert.equal(lib.options.defaultCallMode, Library.callMode.sync);\n                }\n                finally {\n                    lib.release();\n                }\n            });\n\n            it('should init in async mode explicitly', function () {\n                const lib = new Library(libPath, { defaultCallMode: Library.callMode.async });\n                try {\n                    assert(_.isObject(lib));\n                    lib.initialize();\n                    assert.equal(lib.options.defaultCallMode, Library.callMode.async);\n                }\n                finally {\n                    lib.release();\n                }\n            });\n\n            it('should throw when mode is unknown', function () {\n                assert.throws(() => {\n                    const lib = new Library(libPath, { defaultCallMode: 42 });\n                });\n            });\n        });\n    });\n\n    describe('sync call mode (smoke test)', function () {\n        let lib = null;\n\n        beforeEach(function () {\n            lib = new Library(libPath);\n        });\n\n        afterEach(function () {\n            lib.release();\n            lib = null;\n        });\n\n        describe('node-ffi style declaration', function () {\n            it('should invoke \"mul\" with \"declare\"', function () {\n                lib.function({ mul: ['int', [ref.types.int, 'int']] });\n                testMulSync('int mul(int arg0, int arg1)');\n            });\n\n            it('should invoke \"mul\" with \"declareSync\"', function () {\n                lib.syncFunction({ mul: ['int', [ref.types.int, 'int']] });\n                testMulSync('int mul(int arg0, int arg1)');\n            });\n\n            it(\"should send Node.js Buffer's memory content to native code\", function () {\n                lib.function({ readLongPtr: ['long', [ref.refType('long'), 'uint']] });\n                testReadLongPtrSync('long readLongPtr(long* arg0, uint arg1)');\n            });\n\n            it(\"should allow to write Node.js's string content in native code\", function () {\n                lib.function({ writeString: ['void', ['char*']] });\n                testWriteStringSync('void writeString(char* arg0)');\n            });\n\n            it('should read natvie memory', function () {\n                lib.function({ getString: ['char*', []] });\n                testGetStringSync('char* getString()');\n            });\n\n            it('should handle out arguments', function () {\n                lib.function({ getNumbers: ['void', ['double**', ref.refType('size_t')]] });\n                testGetNumbersSync('void getNumbers(double** arg0, size_t* arg1)');\n            });\n\n            it('should support callbacks', function () {\n                lib\n                    .callback({ TMakeIntFunc: ['int', [ref.types.float, 'double']] })\n                    .function({ makeInt: ['int', ['float', 'double', 'TMakeIntFunc']] });\n\n                testMakeIntSync(\n                    'int TMakeIntFunc(float arg0, double arg1)',\n                    'int makeInt(float arg0, double arg1, TMakeIntFunc arg2)');\n            });\n        });\n\n        describe('string declaration', function () {\n            it('should invoke \"mul\" with \"declare\"', function () {\n                // Argument name is optional:\n                lib.function('int mul(int value, int)');\n                testMulSync('int mul(int value, int arg1)');\n            });\n\n            it('should invoke \"mul\" with \"declareSync\"', function () {\n                // Argument name is optional:\n                lib.function('int mul(int, int by)');\n                testMulSync('int mul(int arg0, int by)');\n            });\n\n            it(\"should send Node.js Buffer's memory content to native code\", function () {\n                lib.function('long readLongPtr(long* ptr, uint offset)');\n                testReadLongPtrSync('long readLongPtr(long* ptr, uint offset)');\n            });\n\n            it(\"should allow to write Node.js's string content in native code\", function () {\n                lib.function('void writeString(char* )');\n                testWriteStringSync('void writeString(char* arg0)');\n            });\n\n            it('should read natvie memory', function () {\n                lib.function('char *getString()');\n                testGetStringSync('char* getString()');\n            });\n\n            it('should handle out arguments', function () {\n                lib.function('  void   getNumbers ( double *  * nums , size_t*count) ');\n                testGetNumbersSync('void getNumbers(double** nums, size_t* count)');\n            });\n\n            it('should support callbacks', function () {\n                lib\n                    .callback('int TMakeIntFunc(float fv, double)')\n                    .function('int makeInt(float , double dv, TMakeIntFunc func)');\n\n                testMakeIntSync(\n                    'int TMakeIntFunc(float fv, double arg1)',\n                    'int makeInt(float arg0, double dv, TMakeIntFunc func)');\n            });\n        });\n\n        function testMulSync(declaration) {\n            assert(lib.functions);\n            assert(lib.functions.mul);\n            assert(lib.interface);\n            assert(_.isFunction(lib.interface.mul));\n            const mul = lib.interface.mul;\n\n            // Verify metadata:\n            assert(mul.function);\n            assert.equal(mul.function.toString(), declaration);\n            assert.equal(mul.function.name, 'mul');\n            assert.equal(mul.function.resultType.name, 'int');\n            assert.equal(mul.function.args.length, 2);\n            assert(_.isString(mul.function.args[0].name));\n            assert.equal(mul.function.args[0].type.name, 'int');\n            assert(_.isString(mul.function.args[1].name));\n            assert.equal(mul.function.args[1].type.name, 'int');\n\n            // Call!\n            assert.equal(mul(2, 2), 4);\n            assert.equal(mul(10, 2), 20);\n            assert.equal(mul(10, \"3\"), 30);\n            assert.equal(mul(10.1, 2.1), 20);\n            assert.equal(mul(mul(4, 4), 2), 32);\n\n            // Zero is the default:\n            assert.equal(mul(10), 0);\n            assert.equal(mul(), 0);\n            assert.equal(mul(\"a\", \"b\"), 0);\n        }\n\n        function testReadLongPtrSync(declaration) {\n            const readLongPtr = lib.interface.readLongPtr;\n            assert(_.isFunction(readLongPtr));\n            assert(readLongPtr.function);\n            assert.equal(readLongPtr.function.toString(), declaration);\n            const long = ref.types.long;\n            const data = new Buffer(long.size * 2);\n            long.set(data, 0, 1);\n            long.set(data, long.size, 42);\n            assert.equal(readLongPtr(data, 0), 1);\n            assert.equal(readLongPtr(data, 1), 42);\n        }\n\n        function testWriteStringSync(declaration) {\n            const writeString = lib.interface.writeString;\n            assert(_.isFunction(writeString));\n            assert(writeString.function);\n            assert.equal(writeString.function.toString(), declaration);\n            const string = ref.allocCString('          ');\n            writeString(string);\n            assert.equal(ref.readCString(string), 'hello');\n        }\n\n        function testGetStringSync(declaration) {\n            const getString = lib.interface.getString;\n            assert(_.isFunction(getString));\n            assert(getString.function);\n            assert.equal(getString.function.toString(), declaration);\n            const string = getString();\n            assert(_.isBuffer(string));\n            assert(_.isObject(string.type));\n            assert.equal(string.type.name, 'char');\n            assert.equal(string.type.indirection, 1);\n            assert.equal(string.length, 0);\n            assert.equal(ref.readCString(string), 'world');\n        }\n\n        // void getNumbers(double** nums, size_t* size)\n        function testGetNumbersSync(declaration) {\n            const getNumbers = lib.interface.getNumbers;\n            assert(_.isFunction(getNumbers));\n            assert.equal(getNumbers.function.toString(), declaration);\n\n            const double = ref.types.double;\n            const doublePtrType = ref.refType(double);\n            const doublePtrPtr = ref.alloc(doublePtrType);\n            const sizeTPtr = ref.alloc('size_t');\n            getNumbers(doublePtrPtr, sizeTPtr);\n\n            const size = ref.deref(sizeTPtr);\n            assert.equal(size, 3);\n            let doublePtr = ref.deref(doublePtrPtr);\n            assert(_.isBuffer(doublePtr));\n            const first = ref.deref(doublePtr);\n            assert(_.isNumber(first));\n            assert.equal(first, 1.1);\n            doublePtr = ref.reinterpret(doublePtr, size * double.size);\n            assert.equal(double.get(doublePtr, 1 * double.size), 2.2);\n            assert.equal(double.get(doublePtr, 2 * double.size), 3.3);\n        }\n\n        function testMakeIntSync(callbackDecl, funcDecl) {\n            const TMakeIntFunc = lib.interface.TMakeIntFunc;\n            assert(_.isFunction(TMakeIntFunc));\n            assert(TMakeIntFunc.callback);\n            assert.equal(TMakeIntFunc.callback.toString(), callbackDecl);\n\n            const makeInt = lib.interface.makeInt;\n            assert(_.isFunction(makeInt));\n            assert.equal(makeInt.function.toString(), funcDecl);\n\n            let result = makeInt(1.1, 2.2, (fv, dv) => fv + dv);\n            assert.equal(result, Math.floor((1.1 + 2.2) * 2));\n        }\n    });\n\n    describe('async call mode (smoke test)', function () {\n        let lib = null;\n\n        beforeEach(function () {\n            lib = new Library(libPath, { defaultCallMode: Library.callMode.async });\n        });\n\n        afterEach(function () {\n            lib.release();\n            lib = null;\n        });\n\n        describe('node-ffi style declaration', function () {\n            it('should invoke \"mul\" with \"declare\"', function () {\n                lib.function({ mul: ['int', [ref.types.int, 'int']] });\n                return testMulAsync('int mul(int arg0, int arg1)');\n            });\n\n            it('should invoke \"mul\" with \"declareAsync\"', function () {\n                lib.asyncFunction({ mul: ['int', [ref.types.int, 'int']] });\n                return testMulAsync('int mul(int arg0, int arg1)');\n            });\n\n            it(\"should send Node.js Buffer's memory content to native code\", function () {\n                lib.function({ readLongPtr: ['long', [ref.refType('long'), 'uint']] });\n                return testReadLongPtrAsync('long readLongPtr(long* arg0, uint arg1)');\n            });\n\n            it(\"should allow to write Node.js's string content in native code\", function () {\n                lib.function({ writeString: ['void', ['char*']] });\n                return testWriteStringAsync('void writeString(char* arg0)');\n            });\n\n            it('should read natvie memory', function () {\n                lib.function({ getString: ['char*', []] });\n                return testGetStringAsync('char* getString()');\n            });\n\n            it('should handle out arguments', function () {\n                lib.function({ getNumbers: ['void', ['double**', ref.refType('size_t')]] });\n                return testGetNumbersAsync('void getNumbers(double** arg0, size_t* arg1)');\n            });\n\n            it('should support callbacks', function () {\n                lib\n                    .callback({ TMakeIntFunc: ['int', [ref.types.float, 'double']] })\n                    .function({ makeInt: ['int', ['float', 'double', 'TMakeIntFunc']] });\n\n                return testMakeIntAsync(\n                    'int TMakeIntFunc(float arg0, double arg1)',\n                    'int makeInt(float arg0, double arg1, TMakeIntFunc arg2)');\n            });\n        });\n\n        describe('string declaration', function () {\n            it('should invoke \"mul\" with \"declare\"', function () {\n                // Argument name is optional:\n                lib.function('int mul(int value, int)');\n                return testMulAsync('int mul(int value, int arg1)');\n            });\n\n            it('should invoke \"mul\" with \"declareAsync\"', function () {\n                // Argument name is optional:\n                lib.function('int mul(int, int by)');\n                return testMulAsync('int mul(int arg0, int by)');\n            });\n\n            it(\"should send Node.js Buffer's memory content to native code\", function () {\n                lib.function('long readLongPtr(long* ptr, uint offset)');\n                return testReadLongPtrAsync('long readLongPtr(long* ptr, uint offset)');\n            });\n\n            it(\"should allow to write Node.js's string content in native code\", function () {\n                lib.function('void writeString(char* )');\n                return testWriteStringAsync('void writeString(char* arg0)');\n            });\n\n            it('should read natvie memory', function () {\n                lib.function('char *getString()');\n                return testGetStringAsync('char* getString()');\n            });\n\n            it('should handle out arguments', function () {\n                lib.function('  void   getNumbers ( double *  * nums , size_t*count) ');\n                return testGetNumbersAsync('void getNumbers(double** nums, size_t* count)');\n            });\n\n            it('should support callbacks', function () {\n                lib\n                    .callback('int TMakeIntFunc(float fv, double)')\n                    .function('int makeInt(float , double dv, TMakeIntFunc func)');\n\n                return testMakeIntAsync(\n                    'int TMakeIntFunc(float fv, double arg1)',\n                    'int makeInt(float arg0, double dv, TMakeIntFunc func)');\n            });\n        });\n\n        var testMulAsync = async(function* (declaration) {\n            assert(lib.functions);\n            assert(lib.functions.mul);\n            assert(lib.interface);\n            assert(_.isFunction(lib.interface.mul));\n            const mul = lib.interface.mul;\n\n            // Verify metadata:\n            assert(mul.function);\n            assert.equal(mul.function.toString(), declaration);\n            assert.equal(mul.function.name, 'mul');\n            assert.equal(mul.function.resultType.name, 'int');\n            assert.equal(mul.function.args.length, 2);\n            assert(_.isString(mul.function.args[0].name));\n            assert.equal(mul.function.args[0].type.name, 'int');\n            assert(_.isString(mul.function.args[1].name));\n            assert.equal(mul.function.args[1].type.name, 'int');\n\n            // Call!\n            assert.equal(yield mul(2, 2), 4);\n            assert.equal(yield mul(10, 2), 20);\n            assert.equal(yield mul(10, \"3\"), 30);\n            assert.equal(yield mul(10.1, 2.1), 20);\n            assert.equal(yield mul(yield mul(4, 4), 2), 32);\n\n            // Zero is the default:\n            assert.equal(yield mul(10), 0);\n            assert.equal(yield mul(), 0);\n            assert.equal(yield mul(\"a\", \"b\"), 0);\n        });\n\n        var testReadLongPtrAsync = async(function* (declaration) {\n            const readLongPtr = lib.interface.readLongPtr;\n            assert(_.isFunction(readLongPtr));\n            assert.equal(readLongPtr.function.toString(), declaration);\n            const long = ref.types.long;\n            const data = new Buffer(long.size * 2);\n            long.set(data, 0, 1);\n            long.set(data, long.size, 42);\n            assert.equal(yield readLongPtr(data, 0), 1);\n            assert.equal(yield readLongPtr(data, 1), 42);\n        });\n\n        var testWriteStringAsync = async(function* (declaration) {\n            const writeString = lib.interface.writeString;\n            assert(_.isFunction(writeString));\n            assert.equal(writeString.function.toString(), declaration);\n            const string = ref.allocCString('          ');\n            yield writeString(string);\n            assert.equal(ref.readCString(string), 'hello');\n        });\n\n        var testGetStringAsync = async(function* (declaration) {\n            const getString = lib.interface.getString;\n            assert(_.isFunction(getString));\n            assert.equal(getString.function.toString(), declaration);\n            const string = yield getString();\n            assert(_.isBuffer(string));\n            assert(_.isObject(string.type));\n            assert.equal(string.type.name, 'char');\n            assert.equal(string.type.indirection, 1);\n            assert.equal(ref.readCString(string), 'world');\n        });\n\n        // void getNumbers(double** nums, size_t* size)\n        var testGetNumbersAsync = async(function* (declaration) {\n            const getNumbers = lib.interface.getNumbers;\n            assert(_.isFunction(getNumbers));\n            assert.equal(getNumbers.function.toString(), declaration);\n\n            const double = ref.types.double;\n            const doublePtrType = ref.refType(double);\n            const doublePtrPtr = ref.alloc(doublePtrType);\n            const sizeTPtr = ref.alloc('size_t');\n            yield getNumbers(doublePtrPtr, sizeTPtr);\n\n            const size = ref.deref(sizeTPtr);\n            assert.equal(size, 3);\n            let doublePtr = ref.deref(doublePtrPtr);\n            assert(_.isBuffer(doublePtr));\n            const first = ref.deref(doublePtr);\n            assert(_.isNumber(first));\n            assert.equal(first, 1.1);\n            doublePtr = ref.reinterpret(doublePtr, size * double.size);\n            assert.equal(double.get(doublePtr, 1 * double.size), 2.2);\n            assert.equal(double.get(doublePtr, 2 * double.size), 3.3);\n        });\n\n        var testMakeIntAsync = async(function* (callbackDecl, funcDecl) {\n            const TMakeIntFunc = lib.interface.TMakeIntFunc;\n            assert(_.isFunction(TMakeIntFunc));\n            assert(TMakeIntFunc.callback);\n            assert.equal(TMakeIntFunc.callback.toString(), callbackDecl);\n\n            const makeInt = lib.interface.makeInt;\n            assert(_.isFunction(makeInt));\n            assert.equal(makeInt.function.toString(), funcDecl);\n\n            const predeclaredCallback = TMakeIntFunc((fv, dv) => fv + dv);\n\n            let result = yield makeInt(1.1, 2.2, predeclaredCallback);\n            assert.equal(result, Math.floor((1.1 + 2.2) * 2));\n        });\n    });\n});"]}