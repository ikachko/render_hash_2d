{"version":3,"sources":["../../../test/suites/refTypes.js"],"names":["fastcall","require","Library","helpers","assert","_","ref","Promise","async","coroutine","StructType","UnionType","ArrayType","describe","libPath","lib","before","findTestlib","beforeEach","afterEach","release","it","result","struct","TNumbers","a","b","c","types","long","equal","testStructInterface","function","testMulStructMembersSync","mulStructMembers","refType","asyncFunction","testMulStructMembersAsync","isObject","structs","isFunction","interface","type","ptr1","Buffer","numbers","noname","strictEqual","derefType","functions","args","ptr","union","TUnion","testUnionInterface","testAccessUnionMembersSync","getAFromUnion","getBFromUnion","getCFromUnion","testAccessUnionMembersAsync","unions","IntArray","arr","throws","array","TLongArray","TRecWithArray","values","index","testArrayInterface","arrays","IntArray4","fixedLength","testArrayFuncsSync","TRecWithArrays","makeRecWithArrays","incRecWithArrays","freeRecWithArrays","testArrayFuncsAsync","fixed","length","record","get","resultRef","alloc","sizeRef","size","deref","i","rec","j","records","TTaggedUnion","getValueFromTaggedUnion","tag","charCodeAt","data"],"mappings":"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","file":"refTypes.js","sourcesContent":["/*\nCopyright 2016 Gábor Mező (gabor.mezo@outlook.com)\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\nconst fastcall = require('../../lib');\nconst Library = fastcall.Library;\nconst helpers = require('./helpers');\nconst assert = require('assert');\nconst _ = require('lodash');\nconst ref = fastcall.ref;\nconst Promise = require('bluebird');\nconst async = Promise.coroutine;\nconst StructType = fastcall.StructType;\nconst UnionType = fastcall.UnionType;\nconst ArrayType = fastcall.ArrayType;\n\ndescribe(`ref types`, function () {\n    let libPath = null;\n    let lib = null;\n    before(async(function* () {\n        libPath = yield helpers.findTestlib();\n    }));\n\n    beforeEach(function () {\n        lib = new Library(libPath);\n    });\n\n    afterEach(function () {\n        lib.release();\n    });\n\n    describe('Struct', function () {\n        it('could be created by plain object definition', function () {\n            const result = lib.struct({\n                TNumbers: {\n                    a: 'short',\n                    b: 'int64',\n                    c: ref.types.long\n                }\n            });\n\n            assert.equal(result, lib);\n            testStructInterface();\n        });\n\n        it('could be created from StructType', function () {\n            const TNumbers = new StructType({\n                a: 'short',\n                b: 'int64',\n                c: ref.types.long\n            });\n            const result = lib.struct({ TNumbers });\n\n            assert.equal(result, lib);\n            testStructInterface();\n        });\n\n        it('should supports C struct like syntax', function () {\n            const result = lib.struct('struct TNumbers { short a; int64 b; long c; }');\n\n            assert.equal(result, lib);\n            testStructInterface();\n        });\n\n        describe('sync', function () {\n            it('should get referenced by string syntax', function () {\n                lib.struct({\n                    TNumbers: {\n                        a: 'short',\n                        b: 'int64',\n                        c: ref.types.long\n                    }\n                })\n                .function('int64 mulStructMembers(TNumbers* numbers)');\n\n                testMulStructMembersSync();\n            });\n\n            it('should get referenced by node-ffi-like syntax', function () {\n                const TNumbers = new StructType({\n                    a: 'short',\n                    b: 'int64',\n                    c: ref.types.long\n                });\n                lib.function({ mulStructMembers: ['int64', [ref.refType(TNumbers)]] });\n\n                testMulStructMembersSync(true);\n            });\n        });\n\n        describe('async', function () {\n            it('should get referenced by string syntax', async(function* () {\n                lib.struct({\n                    TNumbers: {\n                        a: 'short',\n                        b: 'int64',\n                        c: ref.types.long\n                    }\n                })\n                .asyncFunction('int64 mulStructMembers(TNumbers* numbers)');\n\n                yield testMulStructMembersAsync();\n            }));\n\n            it('should get referenced by node-ffi-like syntax', async(function* () {\n                const TNumbers = new StructType({\n                    a: 'short',\n                    b: 'int64',\n                    c: ref.types.long\n                });\n                lib.asyncFunction({ mulStructMembers: ['int64', [ref.refType(TNumbers)]] });\n\n                yield testMulStructMembersAsync(true);\n            }));\n        });\n\n        function testStructInterface() {\n            assert(_.isObject(lib.structs.TNumbers));\n            assert(_.isFunction(lib.interface.TNumbers));\n            assert(_.isFunction(lib.structs.TNumbers.type));\n            assert.equal(lib.interface.TNumbers.struct, lib.structs.TNumbers);\n            assert.equal(lib.interface.TNumbers.type, lib.structs.TNumbers.type);\n\n            const ptr1 = lib.interface.TNumbers({\n                a: 1,\n                b: 2,\n                c: 3\n            });\n            assert(ptr1 instanceof Buffer);\n            assert.equal(ptr1.type, lib.structs.TNumbers.type);\n            assert.equal(ptr1.struct, lib.structs.TNumbers);\n\n            const numbers = lib.structs.TNumbers.type(ptr1);\n            assert.equal(numbers.a, 1);\n            assert.equal(numbers.b, 2);\n            assert.equal(numbers.c, 3);\n        }\n\n        function testMulStructMembersSync(noname) {\n            assert(_.isFunction(lib.interface.mulStructMembers));\n\n            let result;\n            if (!noname) {\n                assert(_.isFunction(lib.interface.TNumbers));\n                assert.strictEqual(ref.derefType(lib.functions.mulStructMembers.args[0].type), lib.structs.TNumbers.type);\n                const ptr = lib.interface.TNumbers({\n                    a: 1,\n                    b: 2,\n                    c: 3\n                });\n                result = lib.interface.mulStructMembers(ptr);\n            }\n            else {\n                const TNumbers = new StructType({\n                    a: 'short',\n                    b: 'int64',\n                    c: ref.types.long\n                });\n\n                const numbers = new TNumbers();\n                numbers.a = 1;\n                numbers.b = 2;\n                numbers.c = 3;\n\n                result = lib.interface.mulStructMembers(numbers.ref());\n            }\n\n            assert.equal(result, 1 * 2 * 3);\n        }\n\n        var testMulStructMembersAsync = async(function* (noname) {\n            assert(_.isFunction(lib.interface.mulStructMembers));\n\n            let result;\n            if (!noname) {\n                assert(_.isFunction(lib.interface.TNumbers));\n                assert.strictEqual(ref.derefType(lib.functions.mulStructMembers.args[0].type), lib.structs.TNumbers.type);\n                const ptr = lib.interface.TNumbers({\n                    a: 1,\n                    b: 2,\n                    c: 3\n                });\n                result = yield lib.interface.mulStructMembers(ptr);\n            }\n            else {\n                result = yield lib.interface.mulStructMembers({\n                    a: 1,\n                    b: 2,\n                    c: 3\n                });\n            }\n\n            assert.equal(result, 1 * 2 * 3);\n        });\n    });\n\n    describe('Union', function () {\n        it('could be created by plain object definition', function () {\n            const result = lib.union({\n                TUnion: {\n                    a: 'short',\n                    b: 'int64',\n                    c: ref.types.long\n                }\n            });\n\n            assert.equal(result, lib);\n            testUnionInterface();\n        });\n\n        it('could be created from UnionType', function () {\n            const TUnion = new UnionType({\n                a: 'short',\n                b: 'int64',\n                c: ref.types.long\n            });\n            const result = lib.union({ TUnion });\n\n            assert.equal(result, lib);\n            testUnionInterface();\n        });\n\n        it('should supports C union like syntax', function () {\n            const result = lib.union('union TUnion { short a; int64 b; long c; }');\n\n            assert.equal(result, lib);\n            testUnionInterface();\n        });\n\n        describe('sync', function () {\n            it('should get referenced by string syntax', function () {\n                lib.union({\n                    TUnion: {\n                        a: 'short',\n                        b: 'int64',\n                        c: ref.types.long\n                    }\n                })\n                .function('int64 getAFromUnion(TUnion* union)')\n                .function('int64 getBFromUnion(TUnion* union)')\n                .function('int64 getCFromUnion(TUnion* union)');\n\n                testAccessUnionMembersSync();\n            });\n\n            it('should get referenced by node-ffi-like syntax', function () {\n                const TUnion = new UnionType({\n                    a: 'short',\n                    b: 'int64',\n                    c: ref.types.long\n                });\n                lib.function({ getAFromUnion: ['int64', [ref.refType(TUnion)]] })\n                .function({ getBFromUnion: ['int64', [ref.refType(TUnion)]] })\n                .function({ getCFromUnion: ['int64', [ref.refType(TUnion)]] });\n\n                testAccessUnionMembersSync(true);\n            });\n        });\n\n        describe('async', function () {\n            it('should get referenced by string syntax', async(function* () {\n                lib.union({\n                    TUnion: {\n                        a: 'short',\n                        b: 'int64',\n                        c: ref.types.long\n                    }\n                })\n                .asyncFunction('int64 getAFromUnion(TUnion* union)')\n                .asyncFunction('int64 getBFromUnion(TUnion* union)')\n                .asyncFunction('int64 getCFromUnion(TUnion* union)');\n\n                yield testAccessUnionMembersAsync();\n            }));\n\n            it('should get referenced by node-ffi-like syntax', async(function* () {\n                const TUnion = new UnionType({\n                    a: 'short',\n                    b: 'int64',\n                    c: ref.types.long\n                });\n                lib.asyncFunction({ getAFromUnion: ['int64', [ref.refType(TUnion)]] })\n                .asyncFunction({ getBFromUnion: ['int64', [ref.refType(TUnion)]] })\n                .asyncFunction({ getCFromUnion: ['int64', [ref.refType(TUnion)]] });\n\n                yield testAccessUnionMembersAsync(true);\n            }));\n        });\n\n        function testUnionInterface() {\n            assert(_.isObject(lib.unions.TUnion));\n            assert(_.isFunction(lib.interface.TUnion));\n            assert(_.isFunction(lib.unions.TUnion.type));\n            assert.equal(lib.interface.TUnion.union, lib.unions.TUnion);\n            assert.equal(lib.interface.TUnion.type, lib.unions.TUnion.type);\n\n            const ptr1 = lib.interface.TUnion({\n                a: 1\n            });\n            assert(ptr1 instanceof Buffer);\n            assert.equal(ptr1.type, lib.unions.TUnion.type);\n            assert.equal(ptr1.union, lib.unions.TUnion);\n\n            const union = lib.unions.TUnion.type(ptr1);\n            assert.equal(union.a, 1);\n        }\n\n        function testAccessUnionMembersSync(noname) {\n            assert(_.isFunction(lib.interface.getAFromUnion));\n            assert(_.isFunction(lib.interface.getBFromUnion));\n            assert(_.isFunction(lib.interface.getCFromUnion));\n\n            if (!noname) {\n                assert(_.isFunction(lib.interface.TUnion));\n                assert.strictEqual(ref.derefType(lib.functions.getAFromUnion.args[0].type), lib.unions.TUnion.type);\n                assert.strictEqual(ref.derefType(lib.functions.getBFromUnion.args[0].type), lib.unions.TUnion.type);\n                assert.strictEqual(ref.derefType(lib.functions.getCFromUnion.args[0].type), lib.unions.TUnion.type);\n\n                const ptr = lib.interface.TUnion({ a: 1 });\n                let result = lib.interface.getAFromUnion(ptr);\n                assert.equal(result, 1);\n\n                const union = lib.unions.TUnion.type({ b: 2 });\n                result = lib.interface.getBFromUnion(union.ref());\n                assert.equal(result, 2);\n            }\n            else {\n                const result = lib.interface.getCFromUnion({ c: 3 });\n                assert.equal(result, 3);\n            }\n        }\n\n        var testAccessUnionMembersAsync = async(function* (noname) {\n            assert(_.isFunction(lib.interface.getAFromUnion));\n            assert(_.isFunction(lib.interface.getBFromUnion));\n            assert(_.isFunction(lib.interface.getCFromUnion));\n\n            if (!noname) {\n                assert(_.isFunction(lib.interface.TUnion));\n                assert.strictEqual(ref.derefType(lib.functions.getAFromUnion.args[0].type), lib.unions.TUnion.type);\n                assert.strictEqual(ref.derefType(lib.functions.getBFromUnion.args[0].type), lib.unions.TUnion.type);\n                assert.strictEqual(ref.derefType(lib.functions.getCFromUnion.args[0].type), lib.unions.TUnion.type);\n\n                const ptr = lib.interface.TUnion({ a: 1 });\n                let result = yield lib.interface.getAFromUnion(ptr);\n                assert.equal(result, 1);\n\n                const union = lib.unions.TUnion.type({ b: 2 });\n                result = yield lib.interface.getBFromUnion(union.ref());\n                assert.equal(result, 2);\n            }\n            else {\n                const result = yield lib.interface.getCFromUnion({ c: 3 });\n                assert.equal(result, 3);\n            }\n        });\n    });\n\n    describe('Array', function () {\n        it('should throw for not supported indexing', function () {\n            const IntArray = new ArrayType('int');\n            const arr = new IntArray([1, 2, 3]);\n            assert.throws(() => arr[0]);\n            assert.throws(() => arr[1]);\n            assert.throws(() => arr[2]);\n            assert.throws(() => arr[3]);\n            assert.throws(() => arr[4]);\n            assert.throws(() => arr[0] = 0);\n            assert.throws(() => arr[1] = 0);\n            assert.throws(() => arr[2] = 0);\n            assert.throws(() => arr[3] = 0);\n            assert.throws(() => arr[4] = 0);\n        });\n\n        describe('fixed length', function () {\n            it('could be created by plain object definition', function () {\n                const result = lib\n                .array({ TLongArray: 'long' })\n                .struct({\n                    TRecWithArray: {\n                        values: 'TLongArray[5]',\n                        index: 'uint'\n                    }\n                });\n\n                assert.equal(result, lib);\n                testArrayInterface(true);\n            });\n\n            it('could be created from ArrayType', function () {\n                const TLongArray = new ArrayType(ref.types.long);\n                const TRecWithArray = new StructType({\n                    values: new ArrayType(ref.types.long, 5),\n                    index: 'uint'\n                });\n                const result = lib.array({ TLongArray }).struct({ TRecWithArray });\n\n                assert.equal(result, lib);\n                testArrayInterface(true);\n            });\n\n            describe('with C like syntax', function () {\n                it('should work for a simple declaration (https://github.com/cmake-js/fastcall/issues/15)', function () {\n                    const result = lib\n                    .array('int[4] IntArray4');\n\n                    assert(_.isFunction(lib.arrays.IntArray4.type));\n                    assert.equal(lib.arrays.IntArray4.type.fixedLength, 4);\n                });\n\n                it('should support length definition in actual use', function () {\n                    const result = lib\n                    .array('long[] TLongArray')\n                    .struct('struct TRecWithArray { TLongArray[5] values; uint index; }');\n\n                    assert.equal(result, lib);\n                    testArrayInterface(true);\n                });\n            });\n        });\n\n        describe('free length', function () {\n            describe('with square brackets', function () {\n                it('could be created by plain object definition', function () {\n                    const result = lib\n                    .array({ TLongArray: 'long' })\n                    .struct({\n                        TRecWithArray: {\n                            values: 'TLongArray[]',\n                            index: 'uint'\n                        }\n                    });\n\n                    assert.equal(result, lib);\n                    testArrayInterface();\n                });\n\n                it('should supports C union like syntax', function () {\n                    const result = lib\n                    .array('long[] TLongArray')\n                    .struct('struct TRecWithArray { TLongArray[] values; uint index; }');\n\n                    assert.equal(result, lib);\n                    testArrayInterface();\n                });\n            });\n\n            describe('without square brackets', function () {\n                it('could be created by plain object definition', function () {\n                    const result = lib\n                    .array({ TLongArray: 'long' })\n                    .struct({\n                        TRecWithArray: {\n                            values: 'TLongArray',\n                            index: 'uint'\n                        }\n                    });\n\n                    assert.equal(result, lib);\n                    testArrayInterface();\n                });\n\n                it('could be created from ArrayType', function () {\n                    const TLongArray = new ArrayType(ref.types.long);\n                    const TRecWithArray = new StructType({\n                        values: TLongArray,\n                        index: 'uint'\n                    });\n                    const result = lib.array({ TLongArray }).struct({ TRecWithArray });\n\n                    assert.equal(result, lib);\n                    testArrayInterface();\n                });\n\n                it('should supports C union like syntax', function () {\n                    const result = lib\n                    .array('long[] TLongArray')\n                    .struct('struct TRecWithArray { TLongArray values; uint index; }');\n\n                    assert.equal(result, lib);\n                    testArrayInterface();\n                });\n            });\n        });\n\n        describe('sync', function () {\n            it('should get referenced by string syntax', function () {\n                lib\n                .array('long[] TLongArray')\n                .struct('struct TRecWithArray { TLongArray[5] values; uint index; }')\n                .array('TRecWithArray[] TRecWithArrays')\n                .function('void makeRecWithArrays(TRecWithArrays* records, long* size)')\n                .function('void incRecWithArrays(TRecWithArray* records, long size)')\n                .function('void freeRecWithArrays(TRecWithArrays records)');\n\n                testArrayFuncsSync();\n            });\n\n            it('should get referenced by node-ffi-like syntax', function () {\n                const TRecWithArray = new StructType({\n                    values: new ArrayType(ref.types.long, 5),\n                    index: 'uint'\n                });\n                const TRecWithArrays = new ArrayType(TRecWithArray);\n\n                lib\n                .function({ makeRecWithArrays: ['void', [ref.refType(TRecWithArrays), ref.refType('long')]] })\n                .function({ incRecWithArrays: ['void', [TRecWithArrays, 'long']] })\n                .function({ freeRecWithArrays: ['void', [TRecWithArrays]] });\n\n                testArrayFuncsSync(TRecWithArray, TRecWithArrays);\n            });\n        });\n\n        describe('async', function () {\n            it('should get referenced by string syntax', async(function* () {\n                lib\n                .array('long[] TLongArray')\n                .struct('struct TRecWithArray { TLongArray[5] values; uint index; }')\n                .array('TRecWithArray[] TRecWithArrays')\n                .function('void makeRecWithArrays(TRecWithArrays* records, long* size)')\n                .function('void incRecWithArrays(TRecWithArrays records, long size)')\n                .function('void freeRecWithArrays(TRecWithArray* records)');\n\n                yield testArrayFuncsAsync();\n            }));\n\n            it('should get referenced by node-ffi-like syntax', async(function* () {\n                const TRecWithArray = new StructType({\n                    values: new ArrayType(ref.types.long, 5),\n                    index: 'uint'\n                });\n                const TRecWithArrays = new ArrayType(TRecWithArray);\n\n                lib\n                .function({ makeRecWithArrays: ['void', [ref.refType(TRecWithArrays), ref.refType('long')]] })\n                .function({ incRecWithArrays: ['void', [TRecWithArrays, 'long']] })\n                .function({ freeRecWithArrays: ['void', [ref.refType(TRecWithArray)]] });\n\n                yield testArrayFuncsAsync(TRecWithArray, TRecWithArrays);\n            }));\n        });\n\n        function testArrayInterface(fixed) {\n            assert(_.isObject(lib.structs.TRecWithArray));\n            assert(_.isFunction(lib.interface.TRecWithArray));\n            assert(_.isFunction(lib.structs.TRecWithArray.type));\n            assert.equal(lib.interface.TRecWithArray.struct, lib.structs.TRecWithArray);\n            assert.equal(lib.interface.TRecWithArray.type, lib.structs.TRecWithArray.type);\n\n            assert(_.isObject(lib.arrays.TLongArray));\n            assert(_.isFunction(lib.interface.TLongArray));\n            assert(_.isFunction(lib.arrays.TLongArray.type));\n            assert.equal(lib.interface.TLongArray.array, lib.arrays.TLongArray);\n            assert.equal(lib.interface.TLongArray.type, lib.arrays.TLongArray.type);\n\n            const ptr1 = lib.interface.TRecWithArray({\n                values: [0, 1, 2, 3, 4],\n                index: 42\n            });\n            if (fixed) {\n                assert(ptr1.length >= 24);\n            }\n            else {\n                assert(ptr1.length >= 16);\n            }\n            assert(ptr1 instanceof Buffer);\n            assert.equal(ptr1.type, lib.structs.TRecWithArray.type);\n            assert.equal(ptr1.struct, lib.structs.TRecWithArray);\n\n            const record = lib.structs.TRecWithArray.type(ptr1);\n            assert.equal(record.index, 42);\n            if (!fixed) {\n                assert.equal(record.values.length, 0);\n                record.values.length = 5;\n            }\n            assert.equal(record.values.length, 5);\n            assert.equal(record.values.get(0), 0);\n            assert.equal(record.values.get(1), 1);\n            assert.equal(record.values.get(2), 2);\n            assert.equal(record.values.get(3), 3);\n            assert.equal(record.values.get(4), 4);\n        }\n\n        function testArrayFuncsSync(TRecWithArray, TRecWithArrays) {\n            TRecWithArray = TRecWithArray || lib.structs.TRecWithArray.type;\n            assert(_.isFunction(TRecWithArray));\n            TRecWithArrays = TRecWithArrays || lib.arrays.TRecWithArrays.type;\n            assert(_.isFunction(TRecWithArrays));\n            assert(_.isFunction(lib.interface.makeRecWithArrays));\n            assert(_.isFunction(lib.interface.incRecWithArrays));\n            assert(_.isFunction(lib.interface.freeRecWithArrays));\n\n            const resultRef = ref.alloc(TRecWithArrays);\n            const sizeRef = ref.alloc('long');\n\n            lib.interface.makeRecWithArrays(resultRef, sizeRef);\n            const size = sizeRef.deref();\n            assert.equal(size, 5);\n            const result = resultRef.deref();\n            assert.equal(result.length, 0);\n            result.length = 5;\n            assert.equal(result.length, 5);\n            for (let i = 0; i < size; i++) {\n                const rec = result.get(i);\n                assert.equal(rec.index, i);\n                for (let j = 0; j < 5; j++) {\n                    assert.equal(rec.values.get(j), j);\n                }\n            }\n\n            lib.interface.freeRecWithArrays(result);\n        }\n\n        var testArrayFuncsAsync = async(function* (TRecWithArray, TRecWithArrays) {\n            TRecWithArray = TRecWithArray || lib.structs.TRecWithArray.type;\n            assert(_.isFunction(TRecWithArray));\n            TRecWithArrays = TRecWithArrays || lib.arrays.TRecWithArrays.type;\n            assert(_.isFunction(TRecWithArrays));\n            assert(_.isFunction(lib.interface.makeRecWithArrays));\n            assert(_.isFunction(lib.interface.incRecWithArrays));\n            assert(_.isFunction(lib.interface.freeRecWithArrays));\n\n            const records = new TRecWithArrays([\n                {\n                    index: 4,\n                    values: [3, 4, 5, 6, 7]\n                },\n                new TRecWithArray({\n                    index: 5,\n                    values: [-3, -4, -5, -6, -7]\n                })\n            ]);\n\n            yield lib.interface.incRecWithArrays.async(records, 2);\n\n            assert.equal(records.get(0).index, 5);\n            assert.equal(records.get(1).index, 6);\n\n            for (let i = 0; i < 5; i++) {\n                assert.equal(records.get(0).values.get(i), i + 4);\n                assert.equal(records.get(1).values.get(i), -2 - i);\n            }\n        });\n    });\n\n    describe('complex ref-types', function () {\n        describe('tagged union', function () {\n            beforeEach(function () {\n                lib.union('union TUnion { short a; int64 b; long c; }')\n                .struct('struct TTaggedUnion { char tag; TUnion data; }')\n                .function('int64 getValueFromTaggedUnion(TTaggedUnion* u)');\n\n                assert(_.isFunction(lib.interface.TUnion));\n                assert(_.isFunction(lib.interface.TTaggedUnion));\n                assert(_.isFunction(lib.interface.getValueFromTaggedUnion));\n                assert(lib.unions.TUnion);\n                assert(lib.structs.TTaggedUnion);\n                assert(lib.functions.getValueFromTaggedUnion);\n            });\n\n            it('works synchronously', function () {\n                let struct = lib.structs.TTaggedUnion.type({\n                    tag: 'b'.charCodeAt(0),\n                    data: { b: 42 }\n                });\n\n                assert(_.isObject(struct));\n                assert.equal(struct.tag, 'b'.charCodeAt(0));\n                assert.equal(struct.data.b, 42);\n\n                let result = lib.interface.getValueFromTaggedUnion(struct.ref());\n                assert.equal(result, 42);\n\n                struct = lib.structs.TTaggedUnion.type({\n                    tag: 'b'.charCodeAt(0),\n                    data: lib.interface.TUnion.type({ b: 42 })\n                });\n\n                assert(_.isObject(struct));\n                assert.equal(struct.tag, 'b'.charCodeAt(0));\n                assert.equal(struct.data.b, 42);\n\n                result = lib.interface.getValueFromTaggedUnion(struct.ref());\n                assert.equal(result, 42);\n            });\n\n            it('works asynchronously', async(function* () {\n                const result = yield lib.interface.getValueFromTaggedUnion.async({\n                    tag: 'a'.charCodeAt(0),\n                    data: { a: 5 }\n                });\n                assert.equal(result, 5);\n            }));\n        });\n    });\n});"]}