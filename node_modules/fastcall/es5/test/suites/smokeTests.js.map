{"version":3,"sources":["../../../test/suites/smokeTests.js"],"names":["fastcall","require","Library","helpers","assert","_","ref","Promise","async","coroutine","describe","libPath","before","findTestlib","it","lib","isObject","initialize","equal","options","defaultCallMode","callMode","sync","release","throws","beforeEach","afterEach","function","mul","types","int","testMulSync","syncFunction","readLongPtr","refType","testReadLongPtrSync","writeString","testWriteStringSync","testPassNullSync","testPassNonPointerSync","getString","testGetStringSync","getNumbers","testGetNumbersSync","callback","TMakeIntFunc","float","makeInt","testMakeIntSync","declaration","functions","interface","isFunction","toString","name","resultType","args","length","isString","type","long","data","Buffer","size","set","string","allocCString","readCString","NULL","isBuffer","indirection","double","doublePtrType","doublePtrPtr","alloc","sizeTPtr","deref","doublePtr","first","isNumber","reinterpret","get","callbackDecl","funcDecl","result","fv","dv","Math","floor","testMulAsync","asyncFunction","testReadLongPtrAsync","testWriteStringAsync","testPassNullAsync","testPassNonPointerAsync","testGetStringAsync","testGetNumbersAsync","testMakeIntAsync","predeclaredCallback","declare","uint64ToShort","strictEqual"],"mappings":"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","file":"smokeTests.js","sourcesContent":["/*\nCopyright 2016 Gábor Mező (gabor.mezo@outlook.com)\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\nconst fastcall = require('../../lib');\nconst Library = fastcall.Library;\nconst helpers = require('./helpers');\nconst assert = require('assert');\nconst _ = require('lodash');\nconst ref = fastcall.ref;\nconst Promise = require('bluebird');\nconst async = Promise.coroutine;\n\ndescribe('Library', function () {\n    let libPath = null;\n    before(async(function* () {\n        libPath = yield helpers.findTestlib();\n    }));\n\n    describe('initialize', function () {\n        describe('without options', function () {\n            it('should init in sync mode as default', function () {\n                const lib = new Library(libPath);\n                try {\n                    assert(_.isObject(lib));\n                    lib.initialize();\n                    assert.equal(lib.options.defaultCallMode, Library.callMode.sync);\n                }\n                finally {\n                    lib.release();\n                }\n            });\n        });\n\n        describe('with options', function () {\n            it('should init in sync mode explicitly', function () {\n                const lib = new Library(libPath, { defaultCallMode: Library.callMode.sync });\n                try {\n                    assert(_.isObject(lib));\n                    lib.initialize();\n                    assert.equal(lib.options.defaultCallMode, Library.callMode.sync);\n                }\n                finally {\n                    lib.release();\n                }\n            });\n\n            it('should init in async mode explicitly', function () {\n                const lib = new Library(libPath, { defaultCallMode: Library.callMode.async });\n                try {\n                    assert(_.isObject(lib));\n                    lib.initialize();\n                    assert.equal(lib.options.defaultCallMode, Library.callMode.async);\n                }\n                finally {\n                    lib.release();\n                }\n            });\n\n            it('should throw when mode is unknown', function () {\n                assert.throws(() => {\n                    const lib = new Library(libPath, { defaultCallMode: 42 });\n                });\n            });\n        });\n    });\n\n    describe('sync call mode (smoke test)', function () {\n        let lib = null;\n\n        beforeEach(function () {\n            lib = new Library(libPath);\n        });\n\n        afterEach(function () {\n            lib.release();\n            lib = null;\n        });\n\n        describe('node-ffi style declaration', function () {\n            it('should invoke \"mul\" with \"declare\"', function () {\n                lib.function({ mul: ['int', [ref.types.int, 'int']] });\n                testMulSync('int mul(int arg0, int arg1)');\n            });\n\n            it('should invoke \"mul\" with \"declareSync\"', function () {\n                lib.syncFunction({ mul: ['int', [ref.types.int, 'int']] });\n                testMulSync('int mul(int arg0, int arg1)');\n            });\n\n            it(\"should send Node.js Buffer's memory content to native code\", function () {\n                lib.function({ readLongPtr: ['long', [ref.refType('long'), 'uint']] });\n                testReadLongPtrSync('long readLongPtr(long* arg0, uint arg1)');\n            });\n\n            it(\"should allow to write Node.js's string content in native code\", function () {\n                lib.function({ writeString: ['void', ['char*']] });\n                testWriteStringSync('void writeString(char* arg0)');\n            });\n\n            it(\"should pass null in place of pointers\", function () {\n                lib.function({ writeString: ['void', ['char*']] });\n                testPassNullSync('void writeString(char* arg0)');\n            });\n\n            it(\"should fail on non pointer argument in place of pointer\", function () {\n                lib.function({ writeString: ['void', ['char*']] });\n                testPassNonPointerSync('void writeString(char* arg0)');\n            });\n\n            it('should read natvie memory', function () {\n                lib.function({ getString: ['char*', []] });\n                testGetStringSync('char* getString()');\n            });\n\n            it('should handle out arguments', function () {\n                lib.function({ getNumbers: ['void', ['double**', ref.refType('size_t')]] });\n                testGetNumbersSync('void getNumbers(double** arg0, size_t* arg1)');\n            });\n\n            it('should support callbacks', function () {\n                lib\n                    .callback({ TMakeIntFunc: ['int', [ref.types.float, 'double']] })\n                    .function({ makeInt: ['int', ['float', 'double', 'TMakeIntFunc']] });\n\n                testMakeIntSync(\n                    'int TMakeIntFunc(float arg0, double arg1)',\n                    'int makeInt(float arg0, double arg1, TMakeIntFunc arg2)');\n            });\n        });\n\n        describe('string declaration', function () {\n            it('should invoke \"mul\" with \"function\"', function () {\n                // Argument name is optional:\n                lib.function('int mul(int value, int)');\n                testMulSync('int mul(int value, int arg1)');\n            });\n\n            it('should invoke \"mul\" with \"syncFunction\"', function () {\n                // Argument name is optional:\n                lib.syncFunction('int mul(int, int by)');\n                testMulSync('int mul(int arg0, int by)');\n            });\n\n            it(\"should send Node.js Buffer's memory content to native code\", function () {\n                lib.function('long readLongPtr(long *ptr, uint offset)');\n                testReadLongPtrSync('long readLongPtr(long* ptr, uint offset)');\n            });\n\n            it(\"should allow to write Node.js's string content in native code\", function () {\n                lib.function('void writeString(char* )');\n                testWriteStringSync('void writeString(char* arg0)');\n            });\n\n            it(\"should pass null in place of pointers\", function () {\n                lib.function('void writeString(char*ch)');\n                testPassNullSync('void writeString(char* ch)');\n            });\n\n            it(\"should fail on non pointer argument in place of pointer\", function () {\n                lib.function('void writeString(char * ch )');\n                testPassNonPointerSync('void writeString(char* ch)');\n            });\n\n            it('should read natvie memory', function () {\n                lib.function('char *getString()');\n                testGetStringSync('char* getString()');\n            });\n\n            it('should handle out arguments', function () {\n                lib.function('  void   getNumbers ( double *  * nums , size_t*count) ');\n                testGetNumbersSync('void getNumbers(double** nums, size_t* count)');\n            });\n\n            it('should support callbacks', function () {\n                lib\n                    .callback('int TMakeIntFunc(float fv, double)')\n                    .function('int makeInt(float , double dv, TMakeIntFunc func)');\n\n                testMakeIntSync(\n                    'int TMakeIntFunc(float fv, double arg1)',\n                    'int makeInt(float arg0, double dv, TMakeIntFunc func)');\n            });\n        });\n\n        function testMulSync(declaration) {\n            assert(lib.functions);\n            assert(lib.functions.mul);\n            assert(lib.interface);\n            assert(_.isFunction(lib.interface.mul));\n            const mul = lib.interface.mul;\n\n            // Verify metadata:\n            assert(mul.function);\n            assert.equal(mul.function.toString(), declaration);\n            assert.equal(mul.function.name, 'mul');\n            assert.equal(mul.function.resultType.name, 'int');\n            assert.equal(mul.function.args.length, 2);\n            assert(_.isString(mul.function.args[0].name));\n            assert.equal(mul.function.args[0].type.name, 'int');\n            assert(_.isString(mul.function.args[1].name));\n            assert.equal(mul.function.args[1].type.name, 'int');\n\n            // Call!\n            assert.equal(mul(2, 2), 4);\n            assert.equal(mul(10, 2), 20);\n            assert.equal(mul(10, \"3\"), 30);\n            assert.equal(mul(10.1, 2.1), 20);\n            assert.equal(mul(mul(4, 4), 2), 32);\n\n            // Zero is the default:\n            assert.equal(mul(10), 0);\n            assert.equal(mul(), 0);\n            assert.equal(mul(\"a\", \"b\"), 0);\n        }\n\n        function testReadLongPtrSync(declaration) {\n            const readLongPtr = lib.interface.readLongPtr;\n            assert(_.isFunction(readLongPtr));\n            assert(readLongPtr.function);\n            assert.equal(readLongPtr.function.toString(), declaration);\n            const long = ref.types.long;\n            const data = new Buffer(long.size * 2);\n            long.set(data, 0, 1);\n            long.set(data, long.size, 42);\n            assert.equal(readLongPtr(data, 0), 1);\n            assert.equal(readLongPtr(data, 1), 42);\n        }\n\n        function testWriteStringSync(declaration) {\n            const writeString = lib.interface.writeString;\n            assert(_.isFunction(writeString));\n            assert(writeString.function);\n            assert.equal(writeString.function.toString(), declaration);\n            const string = ref.allocCString('          ');\n            writeString(string);\n            assert.equal(ref.readCString(string), 'hello');\n        }\n\n        function testPassNullSync(declaration) {\n            const writeString = lib.interface.writeString;\n            assert(_.isFunction(writeString));\n            assert(writeString.function);\n            assert.equal(writeString.function.toString(), declaration);\n            // should not crash:\n            writeString(null);\n            writeString(ref.NULL);\n        }\n\n        function testPassNonPointerSync(declaration) {\n            const writeString = lib.interface.writeString;\n            assert(_.isFunction(writeString));\n            assert(writeString.function);\n            assert.equal(writeString.function.toString(), declaration);\n            assert.throws(() => {\n                writeString(42);\n            });\n            assert.throws(() => {\n                writeString();\n            });\n        }\n\n        function testGetStringSync(declaration) {\n            const getString = lib.interface.getString;\n            assert(_.isFunction(getString));\n            assert(getString.function);\n            assert.equal(getString.function.toString(), declaration);\n            const string = getString();\n            assert(_.isBuffer(string));\n            assert(_.isObject(string.type));\n            assert.equal(string.type.name, 'char');\n            assert.equal(string.type.indirection, 1);\n            assert.equal(string.length, 0);\n            assert.equal(ref.readCString(string), 'world');\n        }\n\n        // void getNumbers(double** nums, size_t* size)\n        function testGetNumbersSync(declaration) {\n            const getNumbers = lib.interface.getNumbers;\n            assert(_.isFunction(getNumbers));\n            assert.equal(getNumbers.function.toString(), declaration);\n\n            const double = ref.types.double;\n            const doublePtrType = ref.refType(double);\n            const doublePtrPtr = ref.alloc(doublePtrType);\n            const sizeTPtr = ref.alloc('size_t');\n            getNumbers(doublePtrPtr, sizeTPtr);\n\n            const size = ref.deref(sizeTPtr);\n            assert.equal(size, 3);\n            let doublePtr = ref.deref(doublePtrPtr);\n            assert(_.isBuffer(doublePtr));\n            const first = ref.deref(doublePtr);\n            assert(_.isNumber(first));\n            assert.equal(first, 1.1);\n            doublePtr = ref.reinterpret(doublePtr, size * double.size);\n            assert.equal(double.get(doublePtr, 1 * double.size), 2.2);\n            assert.equal(double.get(doublePtr, 2 * double.size), 3.3);\n        }\n\n        function testMakeIntSync(callbackDecl, funcDecl) {\n            const TMakeIntFunc = lib.interface.TMakeIntFunc;\n            assert(_.isFunction(TMakeIntFunc));\n            assert(TMakeIntFunc.callback);\n            assert.equal(TMakeIntFunc.callback.toString(), callbackDecl);\n\n            const makeInt = lib.interface.makeInt;\n            assert(_.isFunction(makeInt));\n            assert.equal(makeInt.function.toString(), funcDecl);\n\n            let result = makeInt(1.1, 2.2, (fv, dv) => fv + dv);\n            assert.equal(result, Math.floor((1.1 + 2.2) * 2));\n        }\n    });\n\n    describe('async call mode (smoke test)', function () {\n        let lib = null;\n\n        beforeEach(function () {\n            lib = new Library(libPath, { defaultCallMode: Library.callMode.async });\n        });\n\n        afterEach(function () {\n            lib.release();\n            lib = null;\n        });\n\n        describe('node-ffi style declaration', function () {\n            it('should invoke \"mul\" with \"function\"', function () {\n                lib.function({ mul: ['int', [ref.types.int, 'int']] });\n                return testMulAsync('int mul(int arg0, int arg1)');\n            });\n\n            it('should invoke \"mul\" with \"asyncFunction\"', function () {\n                lib.asyncFunction({ mul: ['int', [ref.types.int, 'int']] });\n                return testMulAsync('int mul(int arg0, int arg1)');\n            });\n\n            it(\"should send Node.js Buffer's memory content to native code\", function () {\n                lib.function({ readLongPtr: ['long', [ref.refType('long'), 'uint']] });\n                return testReadLongPtrAsync('long readLongPtr(long* arg0, uint arg1)');\n            });\n\n            it(\"should allow to write Node.js's string content in native code\", function () {\n                lib.function({ writeString: ['void', ['char*']] });\n                return testWriteStringAsync('void writeString(char* arg0)');\n            });\n\n            it(\"should pass null in place of pointers\", function () {\n                lib.function({ writeString: ['void', ['char*']] });\n                return testPassNullAsync('void writeString(char* arg0)');\n            });\n\n            it(\"should fail on non pointer argument in place of pointer\", function () {\n                lib.function({ writeString: ['void', ['char*']] });\n                return testPassNonPointerAsync('void writeString(char* arg0)');\n            });\n\n            it('should read natvie memory', function () {\n                lib.function({ getString: ['char*', []] });\n                return testGetStringAsync('char* getString()');\n            });\n\n            it('should handle out arguments', function () {\n                lib.function({ getNumbers: ['void', ['double**', ref.refType('size_t')]] });\n                return testGetNumbersAsync('void getNumbers(double** arg0, size_t* arg1)');\n            });\n\n            it('should support callbacks', function () {\n                lib\n                    .callback({ TMakeIntFunc: ['int', [ref.types.float, 'double']] })\n                    .function({ makeInt: ['int', ['float', 'double', 'TMakeIntFunc']] });\n\n                return testMakeIntAsync(\n                    'int TMakeIntFunc(float arg0, double arg1)',\n                    'int makeInt(float arg0, double arg1, TMakeIntFunc arg2)');\n            });\n        });\n\n        describe('string declaration', function () {\n            it('should invoke \"mul\" with \"declare\"', function () {\n                // Argument name is optional:\n                lib.function('int mul(int value, int)');\n                return testMulAsync('int mul(int value, int arg1)');\n            });\n\n            it('should invoke \"mul\" with \"declareAsync\"', function () {\n                // Argument name is optional:\n                lib.function('int mul(int, int by)');\n                return testMulAsync('int mul(int arg0, int by)');\n            });\n\n            it(\"should send Node.js Buffer's memory content to native code\", function () {\n                lib.function('long readLongPtr(long* ptr, uint offset)');\n                return testReadLongPtrAsync('long readLongPtr(long* ptr, uint offset)');\n            });\n\n            it(\"should allow to write Node.js's string content in native code\", function () {\n                lib.function('void writeString(char* )');\n                return testWriteStringAsync('void writeString(char* arg0)');\n            });\n\n            it(\"should pass null in place of pointers\", function () {\n                lib.function('void writeString(char*ch)');\n                return testPassNullAsync('void writeString(char* ch)');\n            });\n\n            it(\"should fail on non pointer argument in place of pointer\", function () {\n                lib.function('void writeString(char * ch )');\n                return testPassNonPointerAsync('void writeString(char* ch)');\n            });\n\n            it('should read natvie memory', function () {\n                lib.function('char *getString()');\n                return testGetStringAsync('char* getString()');\n            });\n\n            it('should handle out arguments', function () {\n                lib.function('  void   getNumbers ( double *  * nums , size_t*count) ');\n                return testGetNumbersAsync('void getNumbers(double** nums, size_t* count)');\n            });\n\n            it('should support callbacks', function () {\n                lib\n                    .callback('int TMakeIntFunc(float fv, double)')\n                    .function('int makeInt(float , double dv, TMakeIntFunc func)');\n\n                return testMakeIntAsync(\n                    'int TMakeIntFunc(float fv, double arg1)',\n                    'int makeInt(float arg0, double dv, TMakeIntFunc func)');\n            });\n        });\n\n        var testMulAsync = async(function* (declaration) {\n            assert(lib.functions);\n            assert(lib.functions.mul);\n            assert(lib.interface);\n            assert(_.isFunction(lib.interface.mul));\n            const mul = lib.interface.mul;\n\n            // Verify metadata:\n            assert(mul.function);\n            assert.equal(mul.function.toString(), declaration);\n            assert.equal(mul.function.name, 'mul');\n            assert.equal(mul.function.resultType.name, 'int');\n            assert.equal(mul.function.args.length, 2);\n            assert(_.isString(mul.function.args[0].name));\n            assert.equal(mul.function.args[0].type.name, 'int');\n            assert(_.isString(mul.function.args[1].name));\n            assert.equal(mul.function.args[1].type.name, 'int');\n\n            // Call!\n            assert.equal(yield mul(2, 2), 4);\n            assert.equal(yield mul(10, 2), 20);\n            assert.equal(yield mul(10, \"3\"), 30);\n            assert.equal(yield mul(10.1, 2.1), 20);\n            assert.equal(yield mul(yield mul(4, 4), 2), 32);\n\n            // Zero is the default:\n            assert.equal(yield mul(10), 0);\n            assert.equal(yield mul(), 0);\n            assert.equal(yield mul(\"a\", \"b\"), 0);\n        });\n\n        var testReadLongPtrAsync = async(function* (declaration) {\n            const readLongPtr = lib.interface.readLongPtr;\n            assert(_.isFunction(readLongPtr));\n            assert.equal(readLongPtr.function.toString(), declaration);\n            const long = ref.types.long;\n            const data = new Buffer(long.size * 2);\n            long.set(data, 0, 1);\n            long.set(data, long.size, 42);\n            assert.equal(yield readLongPtr(data, 0), 1);\n            assert.equal(yield readLongPtr(data, 1), 42);\n        });\n\n        var testWriteStringAsync = async(function* (declaration) {\n            const writeString = lib.interface.writeString;\n            assert(_.isFunction(writeString));\n            assert.equal(writeString.function.toString(), declaration);\n            const string = ref.allocCString('          ');\n            yield writeString(string);\n            assert.equal(ref.readCString(string), 'hello');\n        });\n\n        var testPassNullAsync = async(function* (declaration) {\n            const writeString = lib.interface.writeString;\n            assert(_.isFunction(writeString));\n            assert(writeString.function);\n            assert.equal(writeString.function.toString(), declaration);\n            // should not crash:\n            yield writeString(null);\n            yield writeString(ref.NULL);\n        });\n\n        var testPassNonPointerAsync = async(function* (declaration) {\n            const writeString = lib.interface.writeString;\n            assert(_.isFunction(writeString));\n            assert(writeString.function);\n            assert.equal(writeString.function.toString(), declaration);\n            try {\n                yield writeString(42);\n                assert(false);\n            }\n            catch (err) {\n            }\n            try {\n                yield writeString();\n                assert(false);\n            }\n            catch (err) {\n            }\n        });\n\n        var testGetStringAsync = async(function* (declaration) {\n            const getString = lib.interface.getString;\n            assert(_.isFunction(getString));\n            assert.equal(getString.function.toString(), declaration);\n            const string = yield getString();\n            assert(_.isBuffer(string));\n            assert(_.isObject(string.type));\n            assert.equal(string.type.name, 'char');\n            assert.equal(string.type.indirection, 1);\n            assert.equal(ref.readCString(string), 'world');\n        });\n\n        // void getNumbers(double** nums, size_t* size)\n        var testGetNumbersAsync = async(function* (declaration) {\n            const getNumbers = lib.interface.getNumbers;\n            assert(_.isFunction(getNumbers));\n            assert.equal(getNumbers.function.toString(), declaration);\n\n            const double = ref.types.double;\n            const doublePtrType = ref.refType(double);\n            const doublePtrPtr = ref.alloc(doublePtrType);\n            const sizeTPtr = ref.alloc('size_t');\n            yield getNumbers(doublePtrPtr, sizeTPtr);\n\n            const size = ref.deref(sizeTPtr);\n            assert.equal(size, 3);\n            let doublePtr = ref.deref(doublePtrPtr);\n            assert(_.isBuffer(doublePtr));\n            const first = ref.deref(doublePtr);\n            assert(_.isNumber(first));\n            assert.equal(first, 1.1);\n            doublePtr = ref.reinterpret(doublePtr, size * double.size);\n            assert.equal(double.get(doublePtr, 1 * double.size), 2.2);\n            assert.equal(double.get(doublePtr, 2 * double.size), 3.3);\n        });\n\n        var testMakeIntAsync = async(function* (callbackDecl, funcDecl) {\n            const TMakeIntFunc = lib.interface.TMakeIntFunc;\n            assert(_.isFunction(TMakeIntFunc));\n            assert(TMakeIntFunc.callback);\n            assert.equal(TMakeIntFunc.callback.toString(), callbackDecl);\n\n            const makeInt = lib.interface.makeInt;\n            assert(_.isFunction(makeInt));\n            assert.equal(makeInt.function.toString(), funcDecl);\n\n            const predeclaredCallback = TMakeIntFunc((fv, dv) => fv + dv);\n\n            let result = yield makeInt(1.1, 2.2, predeclaredCallback);\n            assert.equal(result, Math.floor((1.1 + 2.2) * 2));\n        });\n    });\n\n    describe('types', function () {\n        it('supports 64 bit integers', function () {\n            const lib = new Library(libPath);\n            lib.declare('short uint64ToShort(uint64 val)');\n            const uint64ToShort = lib.interface.uint64ToShort;\n            assert(_.isFunction(uint64ToShort));\n            assert.strictEqual(uint64ToShort(0), 0);\n            assert.strictEqual(uint64ToShort(16), 16);\n            assert.strictEqual(uint64ToShort(\"42\"), 42);\n        });\n    });\n});"]}