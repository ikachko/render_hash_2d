{"version":3,"sources":["../../benchmarks/fastcallRun.js"],"names":["_","require","Promise","async","coroutine","imports","config","assert","common","fastcall","ref","module","exports","importBenchlib","fastcallWay","lib","includes","modes","console","log","syncRun","asyncRun","result","addNumbers","interface","addNumbersExp","measure","equal","concat","concatExp","str1","makeStringBuffer","str2","out","Buffer","length","readCString","cb","TMakeIntFunc","a","b","makeInt","makeIntExp","addNumbersAsync","measureAsync","concatAsync","makeIntAsync"],"mappings":"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","file":"fastcallRun.js","sourcesContent":["/*\nCopyright 2016 Gábor Mező (gabor.mezo@outlook.com)\n\nLicensed under the Apache License, Version 2.0 (the 'License');\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an 'AS IS' BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\nconst _ = require('lodash');\nconst Promise = require('bluebird');\nconst async = Promise.coroutine;\nconst imports = require('./imports');\nconst config = require('./config');\nconst assert = require('assert');\nconst common = require('./common');\nconst fastcall = require('../lib');\nconst ref = fastcall.ref;\n\nmodule.exports = async(function* () {\n    const lib = yield imports.importBenchlib.fastcallWay();\n\n    if (_.includes(config.modes, 'sync')) {\n        console.log('--- sync ---');\n        syncRun(lib);\n    }\n    if (_.includes(config.modes, 'async')) {\n        console.log('--- async ---');\n        yield asyncRun(lib);\n    }\n});\n\nfunction syncRun(lib) {\n    let result;\n\n    const addNumbers = lib.interface.addNumbersExp;\n    common.measure('addNumbers', 3, () => {\n        result = addNumbers(addNumbers(5.5, 5), addNumbers(1.1, 1));\n    });\n    assert.equal(result, 5.5 + 5 + 1 + 1);\n\n    const concat = lib.interface.concatExp;\n    common.measure('concat', 1, () => {\n        const str1 = fastcall.makeStringBuffer('Hello,');\n        const str2 = fastcall.makeStringBuffer(' world!');\n        const out = new Buffer(100);\n        concat(str1, str2, out, out.length);\n        result = ref.readCString(out);\n    });\n    assert.equal(result, 'Hello, world!');\n\n    const cb = lib.interface.TMakeIntFunc((a, b) => a + b);\n    const makeInt = lib.interface.makeIntExp;\n    common.measure('callback', 3, () => {\n        result = makeInt(makeInt(5.5, 5.1, cb, null), makeInt(1.1, 1.8, cb, null), cb, null);\n    });\n    assert.equal(result, 5 + 5 + 1 + 1);\n}\n\nvar asyncRun = async(function* (lib) {\n    let result;\n\n    const addNumbersAsync = lib.interface.addNumbersExp.async;\n    yield common.measureAsync('addNumbers', 3, async(function* () {\n        result = yield addNumbersAsync(yield addNumbersAsync(5.5, 5), yield addNumbersAsync(1.1, 1));\n    }));\n    assert.equal(result, 5.5 + 5 + 1 + 1);\n\n    const concatAsync =  lib.interface.concatExp.async;\n    yield common.measureAsync('concat', 1, async(function* () {\n        const str1 = fastcall.makeStringBuffer('Hello,');\n        const str2 = fastcall.makeStringBuffer(' world!');\n        const out = new Buffer(100);\n        yield concatAsync(str1, str2, out, out.length);\n        result = ref.readCString(out);\n    }));\n    assert.equal(result, 'Hello, world!');\n\n    const cb = lib.interface.TMakeIntFunc((a, b) => a + b);\n    const makeIntAsync = lib.interface.makeIntExp.async;\n    yield common.measureAsync('callback', 3, async(function* () {\n        result = yield makeIntAsync(yield makeIntAsync(5.5, 5.1, cb, null), yield makeIntAsync(1.1, 1.8, cb, null), cb, null);\n    }));\n    assert.equal(result, 5 + 5 + 1 + 1);\n});"]}