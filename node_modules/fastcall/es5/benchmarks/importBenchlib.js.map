{"version":3,"sources":["../../benchmarks/importBenchlib.js"],"names":["Promise","require","async","coroutine","fastcall","Library","path","ffi","ffiLib","fastcallLib","exports","ffiWay","findLib","libPath","addNumbersExp","concatExp","makeIntExp","TMakeIntFunc","Callback","f","fastcallWay","callback","function","close","release","find","join","__dirname"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA;;AACA,IAAMA,UAAUC,QAAQ,UAAR,CAAhB;AACA,IAAMC,QAAQF,QAAQG,SAAtB;AACA,IAAMC,WAAWH,QAAQ,QAAR,CAAjB;AACA,IAAMI,UAAUD,SAASC,OAAzB;AACA,IAAMC,OAAOL,QAAQ,MAAR,CAAb;AACA,IAAMM,MAAMN,QAAQ,KAAR,CAAZ;;AAEA,IAAIO,SAAS,IAAb;AACA,IAAIC,cAAc,IAAlB;;AAEAC,QAAQC,MAAR,GAAiBT,4CAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACfM,WAAW,IADI;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAEOI,SAFP;;AAAA;AAETC,2BAFS;;AAGfL,6BAASD,IAAIF,OAAJ,CACLQ,OADK,EAEL;AACIC,uCAAe,CAAC,QAAD,EAAW,CAAC,OAAD,EAAU,KAAV,CAAX,CADnB;AAEIC,mCAAW,CAAC,MAAD,EAAS,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,MAA5B,CAAT,CAFf;AAGIC,oCAAY,CAAC,KAAD,EAAQ,CAAC,OAAD,EAAU,QAAV,EAAoB,OAApB,EAA6B,OAA7B,CAAR;AAHhB,qBAFK,CAAT;AAOAR,2BAAOS,YAAP,GAAsB;AAAA,+BAAKV,IAAIW,QAAJ,CAAa,KAAb,EAAoB,CAAC,OAAD,EAAU,QAAV,EAAoB,OAApB,CAApB,EAAkDC,CAAlD,CAAL;AAAA,qBAAtB;;AAVe;AAAA,qDAYZX,MAZY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAN,EAAjB;;AAeAE,QAAQU,WAAR,GAAsBlB,4CAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACpBO,gBAAgB,IADI;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAEEG,SAFF;;AAAA;AAEdC,2BAFc;;AAGpBJ,kCAAc,IAAIJ,OAAJ,CAAYQ,OAAZ,EACbQ,QADa,CACJ,wCADI,EAEbC,QAFa,CAEJ,qDAFI,EAGbA,QAHa,CAGJ,qDAHI,EAIbA,QAJa,CAIJ,uDAJI,EAKbA,QALa,CAKJ,sDALI,EAMbA,QANa,CAMJ,sDANI,EAObA,QAPa,CAOJ,wDAPI,EAQbA,QARa,CAQJ,sDARI,EASbA,QATa,CASJ,uEATI,EAUbA,QAVa,CAUJ,wFAVI,CAAd;;AAHoB;AAAA,sDAejBb,WAfiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAN,EAAtB;;AAkBAC,QAAQa,KAAR,GAAgB,YAAY;AACxB,QAAId,WAAJ,EAAiB;AACbA,oBAAYe,OAAZ;AACAf,sBAAc,IAAd;AACH;AACJ,CALD;;AAOA,IAAIG,UAAUV,4CAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AACZW,2BADY;AAAA;AAAA;AAAA,2BAGIR,QAAQoB,IAAR,CAAanB,KAAKoB,IAAL,CAAUC,SAAV,EAAqB,IAArB,CAAb,EAAyC,UAAzC,CAHJ;;AAAA;AAGZd,2BAHY;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,2BAMIR,QAAQoB,IAAR,CAAanB,KAAKoB,IAAL,CAAUC,SAAV,EAAqB,OAArB,CAAb,EAA4C,UAA5C,CANJ;;AAAA;AAMZd,2BANY;;AAAA;AAAA,sDAQTA,OARS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAN,EAAd","file":"importBenchlib.js","sourcesContent":["/*\nCopyright 2016 Gábor Mező (gabor.mezo@outlook.com)\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n'use strict';\nconst Promise = require('bluebird');\nconst async = Promise.coroutine;\nconst fastcall = require('../lib');\nconst Library = fastcall.Library;\nconst path = require('path');\nconst ffi = require('ffi');\n\nlet ffiLib = null;\nlet fastcallLib = null;\n\nexports.ffiWay = async(function* () {\n    if (ffiLib === null) {\n        const libPath = yield findLib();\n        ffiLib = ffi.Library(\n            libPath,\n            {\n                addNumbersExp: ['double', ['float', 'int']],\n                concatExp: ['void', ['char*', 'char*', 'char*', 'uint']],\n                makeIntExp: ['int', ['float', 'double', 'void*', 'void*']]\n            });\n        ffiLib.TMakeIntFunc = f => ffi.Callback('int', ['float', 'double', 'void*'], f);\n    }\n    return ffiLib;\n});\n\nexports.fastcallWay = async(function* () {\n    if (fastcallLib === null) {\n        const libPath = yield findLib();\n        fastcallLib = new Library(libPath)\n        .callback('int TMakeIntFunc(float, double, void*)')\n        .function('double measureNativeNumberSyncTest(uint iterations)')\n        .function('double measureNativeStringSyncTest(uint iterations)')\n        .function('double measureNativeCallbackSyncTest(uint iterations)')\n        .function('double measureNativeNumberAsyncTest(uint iterations)')\n        .function('double measureNativeStringAsyncTest(uint iterations)')\n        .function('double measureNativeCallbackAsyncTest(uint iterations)')\n        .function('double addNumbersExp(float floatValue, int intValue)')\n        .function('void concatExp(char* str1, char* str2, char* result, uint resultSize)')\n        .function('int makeIntExp(float floatValue, double doubleValue, TMakeIntFunc func, void* context)');\n    }\n    return fastcallLib;\n});\n\nexports.close = function () {\n    if (fastcallLib) {\n        fastcallLib.release();\n        fastcallLib = null;\n    }\n};\n\nvar findLib = async(function* () {\n    let libPath;\n    try {\n        libPath = yield Library.find(path.join(__dirname, '..'), 'benchlib');\n    }\n    catch (err) {\n        libPath = yield Library.find(path.join(__dirname, '../..'), 'benchlib');\n    }\n    return libPath;\n});"]}